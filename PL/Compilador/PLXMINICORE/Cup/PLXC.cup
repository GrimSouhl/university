import java_cup.runtime.*;
import java.io.*;


parser code {:

PLXC.out.println("error;");
PLXC.out.println("halt;");
done_parsing();
:}


actions code {:
TablaSimbolos tabla = new TablaSimbolos();
int bloqueActual = 0;
int var=0;
:}

/*terminales*/

terminal A_LLAVE, C_LLAVE, PCOMA, AP, CP;
terminal COMA, AC,CC;

//palabras reservadas
terminal INT,FLOAT,CHAR;

//valores
terminal Integer ENTERO,CARACTER;
terminal Double REAL;

//identificadores
terminar String IDENT;

//operadores
terminal MAS,MENOS, MULT, DIVID, ASIGNA;
terminal IGUAL, DIFERENTE, MENOR, MAYOR, MENORIG, MAYORIG, YLOG,OLOG,ADMIR;
terminal MENOSUNARIO,MASMAS,MENOSMENOS;
terminal PORCENT, VIRGU,CAST; //virgu es virgulilla 

//no terminales
non terminal Bloque Lista_de_sent;
non terminal Lista_de_sent;
non terminal List_declar_var;

non terminal Sentencia;
non terminal Expresion;
non terminal Paso, Var_for, Array, Lista_exp, Direccion_for,Else;
non terminal Integer Inicio_bloque;
non terminal String OperadorB, OperadorU, OperadorL;
non terminal ExpTipo;
non terminal  Literal;


//precendencia

precedence left COMA;
precedence left ASIGNA;
precedence left OLOG;
precedence left YLOG;
precedence nonassoc ADMIR; //esto es el operador NOT , o sea la exclamacion
precedence left IGUAL,DIFERENTE;
precedence left MAYOR,MAYORIG, MENOR,MENORIG;
precedence left MAS,MENOS,MULT,DIVID,PORCENT;
precedence left MASMAS,MENOSMENOS;
precedence nonassoc CAST; //abre y cierra parentesis, se usa tb para la connversion de tipos y para las operaciones--> ((int)b)+c
//el profesor lo ha cambiado por un casting, para castear
precedence nonassoc MENOSUNARIO;
//los iguales se pueden encadenar


/*Gramatica*/   

Lista_de_sent::= Sentencia Lista_de_sent {: Bloque b=new Bloque(PLXC.lex.getLine(););
                                            b.add(s);
                                            RESULT=b;
                                            :}
              |Lista_de_sent Sentencia  {:
                                            l.add(s);
                                            RESULT=l; 
                                        :}
              ;

Sentencia ::= List_declar_var PCOMA   {:  RESULT =l;   :}
            |Expresion PCOMA
            |IF AP Expresion:c CP Sentencia Else_if //...falta

            |WHILE AP Expresion:c CP Sentencia

            |DO Sentencia WHILE AP Expresion:c CP PCOMA

            |FOR AP Expresion:a PCOMA Expresion:b PCOMA Expresion:c CP Sentencia

            |PRINT AP Expresion:e CP PCOMA  //no sabe si lo trata con un metodo mas o deja el print como un caso especial aqui, o sea sentencia

            |A_LLAVE Inicio_bloque Lista_de_sent C_LLAVE //en el if, una sentencia es un codigo entre llaves, donde hay sentencia hay un bloque de codigo  if (){ todo esto una unica instruccion de C}. 
            {:
            tabla.borrarBloque(bloqueActual);
            bloqueActual:ba;
            //he cerrado un bloque, tengo que perder todas las variables que habia en ese bloque
           
            :}
            |A_LLAVE C_LLAVE
            |FOR Var_for:v ASIGNA Expresion:ei Direccion_for:d Expresion:ef Paso:p Sentencia 

Inicio_bloque::= {: RESULT= bloqueActual;
                    var++;
                    bloqueActual=var;
                    :}
                    //funciona como una pila con push y top. Cada vez que se abre un bloque se incrementa el numero de bloque y se guarda en la pila.
                    ;

Var_for ::= IDENT:id

Paso ::= STEP Expresion:e

Direccion_for ::= TO 
            | DOWNTO   //esto es para ir pa tras 
            ;

Else_if ::= ELSE Sentencia
  //  |ELSEIF AP Expresion:e CP Sentencia Else_if
    |PCOMA
    ;

Lista_declarar_var ::= ExpTipo:et IDENT:id
                    |ExpTipo:t IDENT:id AC ENTERO:e CC //array
                    |ExpTipo:et IDENT:id AC ASIGNA Expresion:e  //asignacion expresio 
                    |ExpTipo:et IDENT:id AC ENTERO:l CC ASIGNA Array:ef //asignacion de array

                    |Lista_declar_var:t COMA IDENT:id
                    |Lista_declar_var:t COMA IDENT:i AC ENTERO:e CC
                    |Lista_declar_var:t COMA IDENT:i AC ASIGNA Expresion:e
                    |Lista_declar_var:t COMA IDENT:i AC ENTERO:l CC ASIGNA Array:ef
                    ;

Array ::= IDENT:id
        | A_LLAVE Lista_exp:e C_LLAVE
        ;

Lista_exp ::= Expresion:ef
            |Lista_exp:l COMA Expresion:e
            ;

ExpTipo ::= INT
            |CHAR
            |FLOAT   //no se pone boolean porque es interno de nuestro compilador
            ;
// a++, incrementa a , pero devuelve el valor de a antes de incrementar, en cambio ++a, incrementa a y devuelve el valor de a despues de incrementar
Expresion ::= Literal
            |IDENT
            |Expresion:e1 OperadorB Expresion:e2 //operador binario
            |Expresion:e1 OperadorL Expresion:e2 //operador logico
            |OperadorU Expresion:e  //operador unario
            |AP Expresion:e CP
            |Expresion:i MASMAS
            |Expresion:i MENOSMENOS
            |AP ExpTipo:t CP Expresion %prec CAST
            ;
//operadores binarios
OperadorB ::= ASIGNA {:RESULT = Metodo.ASIGNA;:}
            |MAS {:RESULT = Metodo.SUMA;:}
            |MENOS {:RESULT = Metodo.RESTA;:}
            |MULT {:RESULT = Metodo.MULT;:}
            |DIVID {:RESULT = Metodo.DIV;:}
            |IGUAL {:RESULT = Metodo.IGUAL;:}
            |DIFERENTE {:RESULT = Metodo.DIFERENTE;:}
            |MENOR {:RESULT = Metodo.MENOR;:}
            |MAYOR {:RESULT = Metodo.MAYOR;:}
            |MENORIG {:RESULT = Metodo.MENORIG;:}
            |MAYORIG {:RESULT = Metodo.MAYORIG;:}
            |PORCENT {:RESULT = Metodo.PORCENT;:}
            ;
//operadores logicos.Tiene la propiedad de cortocircuit, Se implemento la clase etiqueta por esto
//los casos mas habituales de cortocircuito son los operadores relacionales
// while (a<TAM&& (array[a])=0  ), si no existiera el cortocircuito, se evaluaria array[a] y podria dar un error de segmentacion

// operador de cortocircuito :?
OperadorL ::= YLOG {:RESULT = Metodo.YLOG;:}
            |OLOG {:RESULT = Metodo.OLOG;:}
            //aqui meto todos los operadores logico como la interrogacios
            ;

//operadores unarios
OperadorU ::= MENOSMENOS {:RESULT = Metodo.NEG;:}
            |MASMAS {:RESULT = Metodo.POS;:}
            |VIRGU {:RESULT = Metodo.VIRGU;:}
            |MENOS      
            |ADMIR
            ;

