
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.text.ParseException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\074\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\014" +
    "\000\002\003\007\000\002\003\011\000\002\003\007\000" +
    "\002\003\011\000\002\003\005\000\002\003\006\000\002" +
    "\003\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\002\000\002\010\003\000\002\010\002\000\002\011\003" +
    "\000\002\011\002\000\002\005\002\000\002\006\004\000" +
    "\002\006\006\000\002\006\005\000\002\006\007\000\002" +
    "\004\003\000\002\004\003\000\002\004\005\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\005\000\002\004\006\000\002" +
    "\014\003\000\002\014\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\012" +
    "\003\000\002\012\003\000\002\012\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\050\004\005\005\010\006\011\007\024\010" +
    "\032\011\023\012\034\014\014\016\021\022\006\023\020" +
    "\025\033\026\022\027\013\030\027\032\004\036\026\037" +
    "\012\043\015\001\002\000\024\004\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\016\uffd0\032\uffd0\036\uffd0\037\uffd0\043\uffd0\001" +
    "\002\000\050\017\uffe7\020\152\021\uffe7\022\uffe7\031\uffe7" +
    "\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037\uffe7\041" +
    "\uffe7\042\uffe7\044\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7" +
    "\051\uffe7\001\002\000\056\002\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5\015\ufff5" +
    "\016\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\032\ufff5\036\ufff5\037\ufff5\043\ufff5\001\002" +
    "\000\004\004\147\001\002\000\006\004\uffcb\017\uffcb\001" +
    "\002\000\006\004\uffca\017\uffca\001\002\000\024\004\uffce" +
    "\010\uffce\011\uffce\012\uffce\016\uffce\032\uffce\036\uffce\037" +
    "\uffce\043\uffce\001\002\000\004\016\143\001\002\000\050" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\014\uffed\016\uffed\022\uffed\023\uffed\025\uffed\026\uffed" +
    "\027\uffed\030\uffed\032\uffed\036\uffed\037\uffed\043\uffed\001" +
    "\002\000\024\004\005\010\032\011\023\012\034\016\021" +
    "\032\004\036\026\037\012\043\015\001\002\000\024\004" +
    "\005\010\032\011\023\012\034\016\021\032\004\036\026" +
    "\037\012\043\015\001\002\000\042\022\135\031\070\032" +
    "\050\033\062\034\064\035\047\036\067\037\057\041\051" +
    "\042\055\044\052\045\056\046\061\047\066\050\054\051" +
    "\071\001\002\000\004\016\127\001\002\000\032\004\005" +
    "\005\010\006\011\007\024\010\032\011\023\012\034\016" +
    "\021\032\004\036\026\037\012\043\015\001\002\000\050" +
    "\004\005\005\010\006\011\007\024\010\032\011\023\012" +
    "\034\014\014\016\021\022\006\023\020\025\033\026\022" +
    "\027\013\030\027\032\004\036\026\037\012\043\015\001" +
    "\002\000\046\017\uffc7\021\uffc7\022\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037\uffc7\041\uffc7\042" +
    "\uffc7\044\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\001\002\000\006\004\uffc9\017\uffc9\001\002\000\052\002" +
    "\112\004\005\005\010\006\011\007\024\010\032\011\023" +
    "\012\034\014\014\016\021\022\006\023\020\025\033\026" +
    "\022\027\013\030\027\032\004\036\026\037\012\043\015" +
    "\001\002\000\024\004\uffcf\010\uffcf\011\uffcf\012\uffcf\016" +
    "\uffcf\032\uffcf\036\uffcf\037\uffcf\043\uffcf\001\002\000\024" +
    "\004\005\010\032\011\023\012\034\016\021\032\004\036" +
    "\026\037\012\043\015\001\002\000\006\021\043\022\107" +
    "\001\002\000\046\017\uffe8\021\uffe8\022\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037\uffe8\041\uffe8" +
    "\042\uffe8\044\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051" +
    "\uffe8\001\002\000\046\017\uffc8\021\uffc8\022\uffc8\031\uffc8" +
    "\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\041" +
    "\uffc8\042\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8" +
    "\051\uffc8\001\002\000\004\016\uffed\001\002\000\046\017" +
    "\uffc6\021\uffc6\022\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6" +
    "\035\uffc6\036\uffc6\037\uffc6\041\uffc6\042\uffc6\044\uffc6\045" +
    "\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\001\002\000\054" +
    "\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011" +
    "\uffff\012\uffff\014\uffff\015\uffff\016\uffff\022\uffff\023\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\032\uffff\036\uffff\037" +
    "\uffff\043\uffff\001\002\000\004\016\037\001\002\000\034" +
    "\004\005\005\010\006\011\007\024\010\032\011\023\012" +
    "\034\016\021\022\ufff2\032\004\036\026\037\012\043\015" +
    "\001\002\000\042\022\ufff3\031\070\032\050\033\062\034" +
    "\064\035\047\036\067\037\057\041\051\042\055\044\052" +
    "\045\056\046\061\047\066\050\054\051\071\001\002\000" +
    "\004\022\077\001\002\000\006\021\043\022\ufff4\001\002" +
    "\000\004\004\044\001\002\000\010\020\045\021\uffea\022" +
    "\uffea\001\002\000\024\004\005\010\032\011\023\012\034" +
    "\016\021\032\004\036\026\037\012\043\015\001\002\000" +
    "\044\021\uffe9\022\uffe9\031\070\032\050\033\062\034\064" +
    "\035\047\036\067\037\057\041\051\042\055\044\052\045" +
    "\056\046\061\047\066\050\054\051\071\001\002\000\024" +
    "\004\uffd7\010\uffd7\011\uffd7\012\uffd7\016\uffd7\032\uffd7\036" +
    "\uffd7\037\uffd7\043\uffd7\001\002\000\024\004\uffda\010\uffda" +
    "\011\uffda\012\uffda\016\uffda\032\uffda\036\uffda\037\uffda\043" +
    "\uffda\001\002\000\024\004\005\010\032\011\023\012\034" +
    "\016\021\032\004\036\026\037\012\043\015\001\002\000" +
    "\024\004\uffd6\010\uffd6\011\uffd6\012\uffd6\016\uffd6\032\uffd6" +
    "\036\uffd6\037\uffd6\043\uffd6\001\002\000\046\017\uffde\021" +
    "\uffde\022\uffde\031\uffde\032\uffde\033\uffde\034\uffde\035\uffde" +
    "\036\uffde\037\uffde\041\uffde\042\uffde\044\uffde\045\uffde\046" +
    "\uffde\047\uffde\050\uffde\051\uffde\001\002\000\024\004\uffd2" +
    "\010\uffd2\011\uffd2\012\uffd2\016\uffd2\032\uffd2\036\uffd2\037" +
    "\uffd2\043\uffd2\001\002\000\024\004\005\010\032\011\023" +
    "\012\034\016\021\032\004\036\026\037\012\043\015\001" +
    "\002\000\024\004\uffd5\010\uffd5\011\uffd5\012\uffd5\016\uffd5" +
    "\032\uffd5\036\uffd5\037\uffd5\043\uffd5\001\002\000\046\017" +
    "\uffcc\021\uffcc\022\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\035\uffcc\036\uffcc\037\uffcc\041\uffcc\042\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\050\uffcc\051\uffcc\001\002\000\024" +
    "\004\005\010\032\011\023\012\034\016\021\032\004\036" +
    "\026\037\012\043\015\001\002\000\024\004\uffd4\010\uffd4" +
    "\011\uffd4\012\uffd4\016\uffd4\032\uffd4\036\uffd4\037\uffd4\043" +
    "\uffd4\001\002\000\024\004\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\016\uffd9\032\uffd9\036\uffd9\037\uffd9\043\uffd9\001\002\000" +
    "\024\004\005\010\032\011\023\012\034\016\021\032\004" +
    "\036\026\037\012\043\015\001\002\000\024\004\uffd8\010" +
    "\uffd8\011\uffd8\012\uffd8\016\uffd8\032\uffd8\036\uffd8\037\uffd8" +
    "\043\uffd8\001\002\000\024\004\005\010\032\011\023\012" +
    "\034\016\021\032\004\036\026\037\012\043\015\001\002" +
    "\000\024\004\uffd3\010\uffd3\011\uffd3\012\uffd3\016\uffd3\032" +
    "\uffd3\036\uffd3\037\uffd3\043\uffd3\001\002\000\046\017\uffcd" +
    "\021\uffcd\022\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\041\uffcd\042\uffcd\044\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\050\uffcd\051\uffcd\001\002\000\024\004" +
    "\uffdb\010\uffdb\011\uffdb\012\uffdb\016\uffdb\032\uffdb\036\uffdb" +
    "\037\uffdb\043\uffdb\001\002\000\024\004\uffd1\010\uffd1\011" +
    "\uffd1\012\uffd1\016\uffd1\032\uffd1\036\uffd1\037\uffd1\043\uffd1" +
    "\001\002\000\046\017\uffe3\021\uffe3\022\uffe3\031\070\032" +
    "\050\033\062\034\064\035\047\036\067\037\057\041\uffe3" +
    "\042\uffe3\044\uffe3\045\uffe3\046\uffe3\047\uffe3\050\uffe3\051" +
    "\uffe3\001\002\000\046\017\uffe5\021\uffe5\022\uffe5\031\uffe5" +
    "\032\uffe5\033\062\034\064\035\047\036\067\037\057\041" +
    "\uffe5\042\uffe5\044\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\001\002\000\046\017\uffe4\021\uffe4\022\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\036\067\037\057" +
    "\041\uffe4\042\uffe4\044\uffe4\045\uffe4\046\uffe4\047\uffe4\050" +
    "\uffe4\051\uffe4\001\002\000\046\017\uffe1\021\uffe1\022\uffe1" +
    "\031\070\032\050\033\062\034\064\035\047\036\067\037" +
    "\057\041\051\042\uffe1\044\052\045\056\046\061\047\066" +
    "\050\054\051\071\001\002\000\046\017\uffe2\021\uffe2\022" +
    "\uffe2\031\070\032\050\033\062\034\064\035\047\036\067" +
    "\037\057\041\uffe2\042\uffe2\044\052\045\056\046\061\047" +
    "\066\050\054\051\071\001\002\000\026\004\005\010\032" +
    "\011\023\012\034\016\021\022\ufff0\032\004\036\026\037" +
    "\012\043\015\001\002\000\004\022\102\001\002\000\042" +
    "\022\ufff1\031\070\032\050\033\062\034\064\035\047\036" +
    "\067\037\057\041\051\042\055\044\052\045\056\046\061" +
    "\047\066\050\054\051\071\001\002\000\026\004\005\010" +
    "\032\011\023\012\034\016\021\017\uffee\032\004\036\026" +
    "\037\012\043\015\001\002\000\042\017\uffef\031\070\032" +
    "\050\033\062\034\064\035\047\036\067\037\057\041\051" +
    "\042\055\044\052\045\056\046\061\047\066\050\054\051" +
    "\071\001\002\000\004\017\105\001\002\000\050\004\005" +
    "\005\010\006\011\007\024\010\032\011\023\012\034\014" +
    "\014\016\021\022\006\023\020\025\033\026\022\027\013" +
    "\030\027\032\004\036\026\037\012\043\015\001\002\000" +
    "\056\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\011\ufffc\012\ufffc\014\ufffc\015\ufffc\016\ufffc\022\ufffc\023" +
    "\ufffc\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\032\ufffc" +
    "\036\ufffc\037\ufffc\043\ufffc\001\002\000\056\002\ufffe\004" +
    "\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe" +
    "\014\ufffe\015\ufffe\016\ufffe\022\ufffe\023\ufffe\024\ufffe\025" +
    "\ufffe\026\ufffe\027\ufffe\030\ufffe\032\ufffe\036\ufffe\037\ufffe" +
    "\043\ufffe\001\002\000\042\022\111\031\070\032\050\033" +
    "\062\034\064\035\047\036\067\037\057\041\051\042\055" +
    "\044\052\045\056\046\061\047\066\050\054\051\071\001" +
    "\002\000\056\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\011\ufff7\012\ufff7\014\ufff7\015\ufff7\016\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030\ufff7" +
    "\032\ufff7\036\ufff7\037\ufff7\043\ufff7\001\002\000\004\002" +
    "\000\001\002\000\054\002\001\004\001\005\001\006\001" +
    "\007\001\010\001\011\001\012\001\014\001\015\001\016" +
    "\001\022\001\023\001\025\001\026\001\027\001\030\001" +
    "\032\001\036\001\037\001\043\001\001\002\000\004\027" +
    "\115\001\002\000\004\016\116\001\002\000\024\004\005" +
    "\010\032\011\023\012\034\016\021\032\004\036\026\037" +
    "\012\043\015\001\002\000\042\017\120\031\070\032\050" +
    "\033\062\034\064\035\047\036\067\037\057\041\051\042" +
    "\055\044\052\045\056\046\061\047\066\050\054\051\071" +
    "\001\002\000\004\022\121\001\002\000\056\002\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\014\ufffa\015\ufffa\016\ufffa\022\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\026\ufffa\027\ufffa\030\ufffa\032\ufffa\036\ufffa\037\ufffa" +
    "\043\ufffa\001\002\000\042\017\126\031\070\032\050\033" +
    "\062\034\064\035\047\036\067\037\057\041\051\042\055" +
    "\044\052\045\056\046\061\047\066\050\054\051\071\001" +
    "\002\000\004\017\124\001\002\000\024\004\005\010\032" +
    "\011\023\012\034\016\021\032\004\036\026\037\012\043" +
    "\015\001\002\000\046\017\uffdc\021\uffdc\022\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\067\037\057\041" +
    "\uffdc\042\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc" +
    "\051\uffdc\001\002\000\046\017\uffdd\021\uffdd\022\uffdd\031" +
    "\uffdd\032\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\041\uffdd\042\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050" +
    "\uffdd\051\uffdd\001\002\000\024\004\005\010\032\011\023" +
    "\012\034\016\021\032\004\036\026\037\012\043\015\001" +
    "\002\000\042\017\131\031\070\032\050\033\062\034\064" +
    "\035\047\036\067\037\057\041\051\042\055\044\052\045" +
    "\056\046\061\047\066\050\054\051\071\001\002\000\050" +
    "\004\005\005\010\006\011\007\024\010\032\011\023\012" +
    "\034\014\014\016\021\022\006\023\020\025\033\026\022" +
    "\027\013\030\027\032\004\036\026\037\012\043\015\001" +
    "\002\000\056\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\012\ufff9\014\ufff9\015\ufff9\016\ufff9\022" +
    "\ufff9\023\ufff9\024\133\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\032\ufff9\036\ufff9\037\ufff9\043\ufff9\001\002\000\050\004" +
    "\005\005\010\006\011\007\024\010\032\011\023\012\034" +
    "\014\014\016\021\022\006\023\020\025\033\026\022\027" +
    "\013\030\027\032\004\036\026\037\012\043\015\001\002" +
    "\000\056\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\011\ufff8\012\ufff8\014\ufff8\015\ufff8\016\ufff8\022\ufff8" +
    "\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8\032" +
    "\ufff8\036\ufff8\037\ufff8\043\ufff8\001\002\000\056\002\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\014\ufffd\015\ufffd\016\ufffd\022\ufffd\023\ufffd\024\ufffd" +
    "\025\ufffd\026\ufffd\027\ufffd\030\ufffd\032\ufffd\036\ufffd\037" +
    "\ufffd\043\ufffd\001\002\000\042\017\uffdf\021\uffdf\022\uffdf" +
    "\031\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\041\uffdf\042" +
    "\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf" +
    "\001\002\000\046\017\uffe0\021\uffe0\022\uffe0\031\070\032" +
    "\050\033\062\034\064\035\047\036\067\037\057\041\uffe0" +
    "\042\uffe0\044\052\045\056\046\061\047\066\050\054\051" +
    "\071\001\002\000\050\004\005\005\010\006\011\007\024" +
    "\010\032\011\023\012\034\014\014\016\021\022\006\023" +
    "\020\025\033\026\022\027\013\030\027\032\004\036\026" +
    "\037\012\043\015\001\002\000\052\004\005\005\010\006" +
    "\011\007\024\010\032\011\023\012\034\014\014\015\142" +
    "\016\021\022\006\023\020\025\033\026\022\027\013\030" +
    "\027\032\004\036\026\037\012\043\015\001\002\000\056" +
    "\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\014\ufff6\015\ufff6\016\ufff6\022\ufff6\023\ufff6" +
    "\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\032\ufff6\036" +
    "\ufff6\037\ufff6\043\ufff6\001\002\000\024\004\005\010\032" +
    "\011\023\012\034\016\021\032\004\036\026\037\012\043" +
    "\015\001\002\000\042\017\145\031\070\032\050\033\062" +
    "\034\064\035\047\036\067\037\057\041\051\042\055\044" +
    "\052\045\056\046\061\047\066\050\054\051\071\001\002" +
    "\000\050\004\005\005\010\006\011\007\024\010\032\011" +
    "\023\012\034\014\014\016\021\022\006\023\020\025\033" +
    "\026\022\027\013\030\027\032\004\036\026\037\012\043" +
    "\015\001\002\000\056\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\012\ufffb\014\ufffb\015\ufffb\016" +
    "\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb" +
    "\030\ufffb\032\ufffb\036\ufffb\037\ufffb\043\ufffb\001\002\000" +
    "\010\020\150\021\uffec\022\uffec\001\002\000\024\004\005" +
    "\010\032\011\023\012\034\016\021\032\004\036\026\037" +
    "\012\043\015\001\002\000\044\021\uffeb\022\uffeb\031\070" +
    "\032\050\033\062\034\064\035\047\036\067\037\057\041" +
    "\051\042\055\044\052\045\056\046\061\047\066\050\054" +
    "\051\071\001\002\000\024\004\005\010\032\011\023\012" +
    "\034\016\021\032\004\036\026\037\012\043\015\001\002" +
    "\000\046\017\uffe6\021\uffe6\022\uffe6\031\070\032\050\033" +
    "\062\034\064\035\047\036\067\037\057\041\051\042\055" +
    "\044\052\045\056\046\061\047\066\050\054\051\071\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\151\000\020\002\024\003\034\004\016\006\027\012" +
    "\006\016\015\020\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\137\001\001\000\010\004\136\016\015\020" +
    "\030\001\001\000\010\004\135\016\015\020\030\001\001" +
    "\000\012\013\057\014\062\015\064\017\052\001\001\000" +
    "\002\001\001\000\012\004\121\012\122\016\015\020\030" +
    "\001\001\000\016\003\113\004\016\006\027\012\006\016" +
    "\015\020\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\112\004\016\006\027\012\006\016\015\020" +
    "\030\001\001\000\002\001\001\000\010\004\107\016\015" +
    "\020\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\037\006" +
    "\041\007\040\012\006\016\015\020\030\001\001\000\012" +
    "\013\057\014\062\015\064\017\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\045\016\015\020\030\001\001\000\012\013" +
    "\057\014\062\015\064\017\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\075\016\015\020\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\074\016\015\020\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\073\016\015\020\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\004" +
    "\072\016\015\020\030\001\001\000\002\001\001\000\010" +
    "\004\071\016\015\020\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\013\057\014\062\015\064\017\052\001\001\000\012\013" +
    "\057\014\062\015\064\017\052\001\001\000\012\013\057" +
    "\014\062\015\064\017\052\001\001\000\012\013\057\014" +
    "\062\015\064\017\052\001\001\000\012\013\057\014\062" +
    "\015\064\017\052\001\001\000\012\004\100\010\077\016" +
    "\015\020\030\001\001\000\002\001\001\000\012\013\057" +
    "\014\062\015\064\017\052\001\001\000\012\004\102\011" +
    "\103\016\015\020\030\001\001\000\012\013\057\014\062" +
    "\015\064\017\052\001\001\000\002\001\001\000\016\003" +
    "\105\004\016\006\027\012\006\016\015\020\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\013\057\014" +
    "\062\015\064\017\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\116\016\015\020\030\001\001\000\012" +
    "\013\057\014\062\015\064\017\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\013\057\014\062\015\064" +
    "\017\052\001\001\000\002\001\001\000\010\004\124\016" +
    "\015\020\030\001\001\000\012\013\057\014\062\015\064" +
    "\017\052\001\001\000\002\001\001\000\010\004\127\016" +
    "\015\020\030\001\001\000\012\013\057\014\062\015\064" +
    "\017\052\001\001\000\016\003\131\004\016\006\027\012" +
    "\006\016\015\020\030\001\001\000\002\001\001\000\016" +
    "\003\133\004\016\006\027\012\006\016\015\020\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\013\057" +
    "\014\062\015\064\017\052\001\001\000\012\013\057\014" +
    "\062\015\064\017\052\001\001\000\020\002\140\003\034" +
    "\004\016\006\027\012\006\016\015\020\030\001\001\000" +
    "\016\003\112\004\016\006\027\012\006\016\015\020\030" +
    "\001\001\000\002\001\001\000\010\004\143\016\015\020" +
    "\030\001\001\000\012\013\057\014\062\015\064\017\052" +
    "\001\001\000\016\003\145\004\016\006\027\012\006\016" +
    "\015\020\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\150\016\015\020\030\001\001\000\012\013" +
    "\057\014\062\015\064\017\052\001\001\000\010\004\152" +
    "\016\015\020\030\001\001\000\012\013\057\014\062\015" +
    "\064\017\052\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    action_obj.tabla = new TablaSimbolos();

    action_obj.bloqueActual = 0; // Bloque en el que me encuentro
    action_obj.idBloque = 0; // Contador de bloques

    }


    public void syntax_error(Symbol cur_token) {;}

    public void unrecovered_syntax_error(Symbol cur_token) {
        System.err.println("Syntax Error. Línea: " + PLXC.lex.getLine() + " Columna: " + PLXC.lex.getColumn());
        PLXC.out.println("# Syntax Error");
        PLXC.out.println("error;");
        PLXC.out.println("halt;");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    TablaSimbolos tabla;
    Integer bloqueActual;
    Integer idBloque;

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // lista_sent ::= lista_sent sent 
            {
              Bloque RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    b.add(s);
                    RESULT = b;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= lista_sent EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_sent ::= sent 
            {
              Bloque RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Bloque b = new Bloque(PLXC.lex.getLine());
                    b.add(s);
                    RESULT = b;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sent",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sent ::= lista_declaracion PYC 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = l;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= exp PYC 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = e;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= FOR inicio_bloque AP inicio_for PYC cond_for PYC act_for CP sent 
            {
              Instruccion RESULT =null;
		int bloqueAnteriorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bloqueAnteriorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer bloqueAnterior = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tabla.eliminarBloque(bloqueActual);
                bloqueActual = bloqueAnterior;
                RESULT = new SentFOR(PLXC.lex.getLine(), i, c, a, s);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= WHILE AP exp CP sent 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SentWHILE(PLXC.lex.getLine(), e, s);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= DO sent WHILE AP exp CP PYC 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                RESULT = new SentDOWHILE(PLXC.lex.getLine(), e, s);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= IF AP exp CP sent 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SentIF(PLXC.lex.getLine(), e, s, null);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= IF AP exp CP sent ELSE sent 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SentIF(PLXC.lex.getLine(), e, s1, s2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= PRINT exp PYC 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new LlamadaMetodo(
                    PLXC.lex.getLine(),
                    e,
                    Metodo.MOSTRAR,
                    null
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent ::= ALL inicio_bloque lista_sent CLL 
            {
              Instruccion RESULT =null;
		int bloqueAnteriorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueAnteriorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer bloqueAnterior = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tabla.eliminarBloque(bloqueActual);
                bloqueActual = bloqueAnterior; // Vuelvo al bloque anterior

                RESULT = l;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent ::= PYC 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // inicio_for ::= lista_declaracion 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_for",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // inicio_for ::= exp 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_for",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // inicio_for ::= 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_for",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cond_for ::= exp 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_for",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cond_for ::= 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond_for",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // act_for ::= exp 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("act_for",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // act_for ::= 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("act_for",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // inicio_bloque ::= 
            {
              Integer RESULT =null;
		
    RESULT = bloqueActual; // Guardo el bloque en el que estaba
    idBloque++;
    bloqueActual = idBloque;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("inicio_bloque",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_declaracion ::= tipo IDENT 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Variable v = new Variable(i, bloqueActual, true, t);
                            tabla.declararVariable(PLXC.lex.getLine(), v);
                            RESULT = new ListaVar(PLXC.lex.getLine(), t);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_declaracion ::= tipo IDENT ASIG exp 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Variable v = new Variable(i, bloqueActual, true, t);
                            tabla.declararVariable(PLXC.lex.getLine(), v);

                            ListaVar l = new ListaVar(PLXC.lex.getLine(), t);
                            l.add(
                                new LlamadaMetodo(
                                    PLXC.lex.getLine(),
                                    new ExpVariable(PLXC.lex.getLine(), v),
                                    Metodo.CREAR_VARIABLE,
                                    new Instruccion[]{e}
                                )
                            );

                            RESULT = l;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_declaracion ::= lista_declaracion COMA IDENT 
            {
              ListaVar RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Variable v = new Variable(i, bloqueActual, true, l.getTipo());
                            tabla.declararVariable(PLXC.lex.getLine(), v);
                            RESULT = l;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_declaracion ::= lista_declaracion COMA IDENT ASIG exp 
            {
              ListaVar RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Variable v = new Variable(i, bloqueActual, true, l.getTipo());
                            tabla.declararVariable(PLXC.lex.getLine(), v);

                            l.add(
                                new LlamadaMetodo(
                                    PLXC.lex.getLine(),
                                    new ExpVariable(PLXC.lex.getLine(), v),
                                    Metodo.CREAR_VARIABLE,
                                    new Instruccion[]{e}
                                )
                            );

                            RESULT = l;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= literal 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ExpLiteral(PLXC.lex.getLine(), l);            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= IDENT 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Objeto obj = tabla.buscar(i);

            if(obj == null) {
                throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
            }

            RESULT = new ExpVariable(PLXC.lex.getLine(), (Variable) obj);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= IDENT ASIG exp 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Objeto obj = tabla.buscar(i);

            if(obj == null) {
                throw new ParseException("Variable <" + i + "> no ha sido declarada", PLXC.lex.getLine());
            }

            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                new ExpVariable(PLXC.lex.getLine(), (Variable) obj),
                Metodo.ASIGNAR,
                new Instruccion[]{e}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp op_aditivo exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                op,
                new Instruccion[]{e2}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp op_mult exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                op,
                new Instruccion[]{e2}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp op_relacional exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                op,
                new Instruccion[]{e2}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp AND exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Cortocircuito(
                PLXC.lex.getLine(),
                e1,
                Metodo.AND,
                e2
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp OR exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new Cortocircuito(
                PLXC.lex.getLine(),
                e1,
                Metodo.OR,
                e2
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= NOT exp 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e,
                Metodo.NOT,
                null
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= op_unario exp 
            {
              Instruccion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e,
                op,
                null
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp op_unario_post 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new CopiaYLlamaMetodo(
                PLXC.lex.getLine(),
                e,
                op,
                null
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= AP exp CP 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= AP tipo CP exp 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ExpTipo et = new ExpTipo(PLXC.lex.getLine(), t);
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e,
                Metodo.CAST,
                new Instruccion[]{et}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // op_aditivo ::= MAS 
            {
              String RESULT =null;
		 RESULT = Metodo.SUMA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aditivo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // op_aditivo ::= MENOS 
            {
              String RESULT =null;
		 RESULT = Metodo.RESTA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aditivo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // op_mult ::= MULT 
            {
              String RESULT =null;
		 RESULT = Metodo.PRODUCTO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_mult",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // op_mult ::= DIV 
            {
              String RESULT =null;
		 RESULT = Metodo.DIVISION; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_mult",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op_mult ::= MOD 
            {
              String RESULT =null;
		 RESULT = Metodo.MODULO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_mult",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op_relacional ::= MENOR 
            {
              String RESULT =null;
		 RESULT = Metodo.MENOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op_relacional ::= MENORIGUAL 
            {
              String RESULT =null;
		 RESULT = Metodo.MENOR_IGUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op_relacional ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = Metodo.MAYOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op_relacional ::= MAYORIGUAL 
            {
              String RESULT =null;
		 RESULT = Metodo.MAYOR_IGUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // op_relacional ::= IGUAL 
            {
              String RESULT =null;
		 RESULT = Metodo.IGUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // op_relacional ::= DIST 
            {
              String RESULT =null;
		 RESULT = Metodo.DISTINTO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op_unario ::= MENOS 
            {
              String RESULT =null;
		 RESULT = Metodo.OPUESTO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op_unario ::= MASMAS 
            {
              String RESULT =null;
		 RESULT = Metodo.SIGUIENTE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op_unario ::= MENOSMENOS 
            {
              String RESULT =null;
		 RESULT = Metodo.ANTERIOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op_unario_post ::= MASMAS 
            {
              String RESULT =null;
		 RESULT = Metodo.SIGUIENTE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario_post",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op_unario_post ::= MENOSMENOS 
            {
              String RESULT =null;
		 RESULT = Metodo.ANTERIOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario_post",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = TipoInt.instancia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = TipoChar.instancia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		 RESULT = TipoReal.instancia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= ENTERO 
            {
              Literal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(bloqueActual, TipoInt.instancia, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= CARACTER 
            {
              Literal RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(bloqueActual, TipoChar.instancia, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= REAL 
            {
              Literal RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(bloqueActual, TipoReal.instancia, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
