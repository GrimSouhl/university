
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.text.ParseException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\075\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\003\004\000\002\003\004\000\002\003\006" +
    "\000\002\003\014\000\002\003\007\000\002\003\011\000" +
    "\002\003\007\000\002\003\011\000\002\003\005\000\002" +
    "\003\006\000\002\003\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\002\000\002\006\003\000\002\006\002" +
    "\000\002\007\003\000\002\007\002\000\002\010\002\000" +
    "\002\011\004\000\002\011\006\000\002\011\005\000\002" +
    "\011\007\000\002\004\003\000\002\004\003\000\002\004" +
    "\005\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\005\000\002\004\005\000" +
    "\002\004\005\000\002\004\005\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\005\000\002\004" +
    "\006\000\002\014\003\000\002\014\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\017\003\000\002" +
    "\017\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\060\004\005\005\010\006\012\007\027\010" +
    "\025\011\035\012\024\013\037\015\041\016\030\017\014" +
    "\021\022\025\006\027\004\033\031\034\011\046\021\050" +
    "\036\051\023\052\013\053\032\054\040\060\016\001\002" +
    "\000\030\004\uffd2\011\uffd2\012\uffd2\013\uffd2\015\uffd2\016" +
    "\uffd2\021\uffd2\027\uffd2\033\uffd2\034\uffd2\060\uffd2\001\002" +
    "\000\044\022\uffe6\023\161\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\033\uffe6\034\uffe6\036\uffe6" +
    "\037\uffe6\055\uffe6\056\uffe6\057\uffe6\061\uffe6\001\002\000" +
    "\066\002\ufff4\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4" +
    "\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017\ufff4\020" +
    "\ufff4\021\ufff4\025\ufff4\027\ufff4\033\ufff4\034\ufff4\046\ufff4" +
    "\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053\ufff4\054\ufff4\060" +
    "\ufff4\001\002\000\004\004\156\001\002\000\006\004\uffcd" +
    "\022\uffcd\001\002\000\030\004\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\015\uffd0\016\uffd0\021\uffd0\027\uffd0\033\uffd0\034\uffd0" +
    "\060\uffd0\001\002\000\006\004\uffcc\022\uffcc\001\002\000" +
    "\004\021\152\001\002\000\060\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\015\uffec\016" +
    "\uffec\017\uffec\021\uffec\025\uffec\027\uffec\033\uffec\034\uffec" +
    "\046\uffec\050\uffec\051\uffec\052\uffec\053\uffec\054\uffec\060" +
    "\uffec\001\002\000\062\002\146\004\005\005\010\006\012" +
    "\007\027\010\025\011\035\012\024\013\037\015\041\016" +
    "\030\017\014\021\022\025\006\027\004\033\031\034\011" +
    "\046\021\050\036\051\023\052\013\053\032\054\040\060" +
    "\016\001\002\000\030\004\005\011\035\012\024\013\037" +
    "\015\041\016\030\021\022\027\004\033\031\034\011\060" +
    "\016\001\002\000\030\004\005\011\035\012\024\013\037" +
    "\015\041\016\030\021\022\027\004\033\031\034\011\060" +
    "\016\001\002\000\034\025\142\026\054\027\047\030\052" +
    "\031\055\032\051\033\062\034\060\036\045\037\050\056" +
    "\044\057\063\061\053\001\002\000\004\021\134\001\002" +
    "\000\040\004\005\005\010\006\012\007\027\010\025\011" +
    "\035\012\024\013\037\015\041\016\030\021\022\027\004" +
    "\033\031\034\011\060\016\001\002\000\060\004\005\005" +
    "\010\006\012\007\027\010\025\011\035\012\024\013\037" +
    "\015\041\016\030\017\014\021\022\025\006\027\004\033" +
    "\031\034\011\046\021\050\036\051\023\052\013\053\032" +
    "\054\040\060\016\001\002\000\042\022\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032\uffc8\033\uffc8" +
    "\034\uffc8\036\uffc8\037\uffc8\055\uffc8\056\uffc8\057\uffc8\061" +
    "\uffc8\001\002\000\006\004\uffca\022\uffca\001\002\000\064" +
    "\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\011" +
    "\uffff\012\uffff\013\uffff\015\uffff\016\uffff\017\uffff\020\uffff" +
    "\021\uffff\025\uffff\027\uffff\033\uffff\034\uffff\046\uffff\050" +
    "\uffff\051\uffff\052\uffff\053\uffff\054\uffff\060\uffff\001\002" +
    "\000\006\004\uffcb\022\uffcb\001\002\000\042\022\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\036\uffc6\037\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\061\uffc6\001\002\000\030\004\uffd1\011\uffd1\012\uffd1" +
    "\013\uffd1\015\uffd1\016\uffd1\021\uffd1\027\uffd1\033\uffd1\034" +
    "\uffd1\060\uffd1\001\002\000\030\004\005\011\035\012\024" +
    "\013\037\015\041\016\030\021\022\027\004\033\031\034" +
    "\011\060\016\001\002\000\006\024\102\025\116\001\002" +
    "\000\042\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\036\uffe7\037\uffe7" +
    "\055\uffe7\056\uffe7\057\uffe7\061\uffe7\001\002\000\042\022" +
    "\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031\uffc9" +
    "\032\uffc9\033\uffc9\034\uffc9\036\uffc9\037\uffc9\055\uffc9\056" +
    "\uffc9\057\uffc9\061\uffc9\001\002\000\004\021\uffec\001\002" +
    "\000\042\022\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\036\uffc7\037\uffc7" +
    "\055\uffc7\056\uffc7\057\uffc7\061\uffc7\001\002\000\060\004" +
    "\005\005\010\006\012\007\027\010\025\011\035\012\024" +
    "\013\037\015\041\016\030\017\014\021\022\025\006\027" +
    "\004\033\031\034\011\046\021\050\036\051\023\052\013" +
    "\053\032\054\040\060\016\001\002\000\042\022\uffc5\024" +
    "\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5" +
    "\033\uffc5\034\uffc5\036\uffc5\037\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\061\uffc5\001\002\000\030\004\005\011\035\012\024" +
    "\013\037\015\041\016\030\021\022\027\004\033\031\034" +
    "\011\060\016\001\002\000\034\026\054\027\047\030\052" +
    "\031\055\032\051\033\062\034\060\036\045\037\050\055" +
    "\057\056\044\057\063\061\053\001\002\000\030\004\005" +
    "\011\035\012\024\013\037\015\041\016\030\021\022\027" +
    "\004\033\031\034\011\060\016\001\002\000\030\004\005" +
    "\011\035\012\024\013\037\015\041\016\030\021\022\027" +
    "\004\033\031\034\011\060\016\001\002\000\042\022\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031\uffda\032" +
    "\uffda\033\uffda\034\uffda\036\uffda\037\uffda\055\uffda\056\uffda" +
    "\057\uffda\061\uffda\001\002\000\030\004\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\015\uffd6\016\uffd6\021\uffd6\027\uffd6\033\uffd6" +
    "\034\uffd6\060\uffd6\001\002\000\030\004\005\011\035\012" +
    "\024\013\037\015\041\016\030\021\022\027\004\033\031" +
    "\034\011\060\016\001\002\000\030\004\uffd3\011\uffd3\012" +
    "\uffd3\013\uffd3\015\uffd3\016\uffd3\021\uffd3\027\uffd3\033\uffd3" +
    "\034\uffd3\060\uffd3\001\002\000\030\004\uffd5\011\uffd5\012" +
    "\uffd5\013\uffd5\015\uffd5\016\uffd5\021\uffd5\027\uffd5\033\uffd5" +
    "\034\uffd5\060\uffd5\001\002\000\030\004\005\011\035\012" +
    "\024\013\037\015\041\016\030\021\022\027\004\033\031" +
    "\034\011\060\016\001\002\000\030\004\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\015\uffd7\016\uffd7\021\uffd7\027\uffd7\033\uffd7" +
    "\034\uffd7\060\uffd7\001\002\000\030\004\uffd4\011\uffd4\012" +
    "\uffd4\013\uffd4\015\uffd4\016\uffd4\021\uffd4\027\uffd4\033\uffd4" +
    "\034\uffd4\060\uffd4\001\002\000\030\004\005\011\035\012" +
    "\024\013\037\015\041\016\030\021\022\027\004\033\031" +
    "\034\011\060\016\001\002\000\066\002\ufffc\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\025\ufffc\027" +
    "\ufffc\033\ufffc\034\ufffc\046\ufffc\047\ufffc\050\ufffc\051\ufffc" +
    "\052\ufffc\053\ufffc\054\ufffc\060\ufffc\001\002\000\042\022" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\032\uffce\033\uffce\034\uffce\036\uffce\037\uffce\055\uffce\056" +
    "\uffce\057\uffce\061\uffce\001\002\000\030\004\005\011\035" +
    "\012\024\013\037\015\041\016\030\021\022\027\004\033" +
    "\031\034\011\060\016\001\002\000\042\022\uffcf\024\uffcf" +
    "\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\036\uffcf\037\uffcf\055\uffcf\056\uffcf\057\uffcf" +
    "\061\uffcf\001\002\000\030\004\005\011\035\012\024\013" +
    "\037\015\041\016\030\021\022\027\004\033\031\034\011" +
    "\060\016\001\002\000\030\004\005\011\035\012\024\013" +
    "\037\015\041\016\030\021\022\027\004\033\031\034\011" +
    "\060\016\001\002\000\042\022\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\027\uffe2\030\052\031\055\032\051\033\062\034\060" +
    "\036\uffe2\037\uffe2\055\uffe2\056\uffe2\057\uffe2\061\uffe2\001" +
    "\002\000\042\022\uffdd\024\uffdd\025\uffdd\026\054\027\047" +
    "\030\052\031\055\032\051\033\062\034\060\036\uffdd\037" +
    "\uffdd\055\uffdd\056\044\057\uffdd\061\uffdd\001\002\000\042" +
    "\022\uffe0\024\uffe0\025\uffe0\026\054\027\047\030\052\031" +
    "\055\032\051\033\062\034\060\036\uffe0\037\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\061\uffe0\001\002\000\042\022\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\032\uffe1" +
    "\033\062\034\060\036\uffe1\037\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\061\uffe1\001\002\000\042\022\uffdf\024\uffdf\025\uffdf" +
    "\026\054\027\047\030\052\031\055\032\051\033\062\034" +
    "\060\036\uffdf\037\uffdf\055\uffdf\056\044\057\063\061\053" +
    "\001\002\000\042\022\uffe4\024\uffe4\025\uffe4\026\054\027" +
    "\047\030\052\031\055\032\051\033\062\034\060\036\uffe4" +
    "\037\uffe4\055\uffe4\056\044\057\063\061\053\001\002\000" +
    "\042\022\uffe3\024\uffe3\025\uffe3\026\054\027\047\030\052" +
    "\031\055\032\051\033\062\034\060\036\uffe3\037\uffe3\055" +
    "\uffe3\056\044\057\063\061\053\001\002\000\042\022\uffde" +
    "\024\uffde\025\uffde\026\054\027\047\030\052\031\055\032" +
    "\051\033\062\034\060\036\uffde\037\uffde\055\uffde\056\uffde" +
    "\057\uffde\061\uffde\001\002\000\004\021\076\001\002\000" +
    "\042\004\005\005\010\006\012\007\027\010\025\011\035" +
    "\012\024\013\037\015\041\016\030\021\022\025\ufff1\027" +
    "\004\033\031\034\011\060\016\001\002\000\004\025\106" +
    "\001\002\000\034\025\ufff2\026\054\027\047\030\052\031" +
    "\055\032\051\033\062\034\060\036\045\037\050\056\044" +
    "\057\063\061\053\001\002\000\006\024\102\025\ufff3\001" +
    "\002\000\004\004\103\001\002\000\010\023\104\024\uffe9" +
    "\025\uffe9\001\002\000\030\004\005\011\035\012\024\013" +
    "\037\015\041\016\030\021\022\027\004\033\031\034\011" +
    "\060\016\001\002\000\036\024\uffe8\025\uffe8\026\054\027" +
    "\047\030\052\031\055\032\051\033\062\034\060\036\045" +
    "\037\050\056\044\057\063\061\053\001\002\000\032\004" +
    "\005\011\035\012\024\013\037\015\041\016\030\021\022" +
    "\025\uffef\027\004\033\031\034\011\060\016\001\002\000" +
    "\004\025\111\001\002\000\034\025\ufff0\026\054\027\047" +
    "\030\052\031\055\032\051\033\062\034\060\036\045\037" +
    "\050\056\044\057\063\061\053\001\002\000\032\004\005" +
    "\011\035\012\024\013\037\015\041\016\030\021\022\022" +
    "\uffed\027\004\033\031\034\011\060\016\001\002\000\034" +
    "\022\uffee\026\054\027\047\030\052\031\055\032\051\033" +
    "\062\034\060\036\045\037\050\056\044\057\063\061\053" +
    "\001\002\000\004\022\114\001\002\000\060\004\005\005" +
    "\010\006\012\007\027\010\025\011\035\012\024\013\037" +
    "\015\041\016\030\017\014\021\022\025\006\027\004\033" +
    "\031\034\011\046\021\050\036\051\023\052\013\053\032" +
    "\054\040\060\016\001\002\000\066\002\ufffb\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\021\ufffb\025\ufffb\027" +
    "\ufffb\033\ufffb\034\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\052\ufffb\053\ufffb\054\ufffb\060\ufffb\001\002\000\066\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\025\ufffe\027\ufffe\033\ufffe\034\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\060\ufffe\001" +
    "\002\000\034\025\120\026\054\027\047\030\052\031\055" +
    "\032\051\033\062\034\060\036\045\037\050\056\044\057" +
    "\063\061\053\001\002\000\066\002\ufff6\004\ufff6\005\ufff6" +
    "\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015" +
    "\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\025\ufff6\027\ufff6" +
    "\033\ufff6\034\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052" +
    "\ufff6\053\ufff6\054\ufff6\060\ufff6\001\002\000\004\052\122" +
    "\001\002\000\004\021\123\001\002\000\030\004\005\011" +
    "\035\012\024\013\037\015\041\016\030\021\022\027\004" +
    "\033\031\034\011\060\016\001\002\000\034\022\125\026" +
    "\054\027\047\030\052\031\055\032\051\033\062\034\060" +
    "\036\045\037\050\056\044\057\063\061\053\001\002\000" +
    "\004\025\126\001\002\000\066\002\ufff9\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013\ufff9\015" +
    "\ufff9\016\ufff9\017\ufff9\020\ufff9\021\ufff9\025\ufff9\027\ufff9" +
    "\033\ufff9\034\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\060\ufff9\001\002\000\004\022\132" +
    "\001\002\000\034\022\131\026\054\027\047\030\052\031" +
    "\055\032\051\033\062\034\060\036\045\037\050\056\044" +
    "\057\063\061\053\001\002\000\042\022\uffd9\024\uffd9\025" +
    "\uffd9\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9" +
    "\034\uffd9\036\uffd9\037\uffd9\055\uffd9\056\uffd9\057\uffd9\061" +
    "\uffd9\001\002\000\030\004\005\011\035\012\024\013\037" +
    "\015\041\016\030\021\022\027\004\033\031\034\011\060" +
    "\016\001\002\000\042\022\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\062\034\060\036" +
    "\uffd8\037\uffd8\055\uffd8\056\uffd8\057\uffd8\061\uffd8\001\002" +
    "\000\030\004\005\011\035\012\024\013\037\015\041\016" +
    "\030\021\022\027\004\033\031\034\011\060\016\001\002" +
    "\000\034\022\136\026\054\027\047\030\052\031\055\032" +
    "\051\033\062\034\060\036\045\037\050\056\044\057\063" +
    "\061\053\001\002\000\060\004\005\005\010\006\012\007" +
    "\027\010\025\011\035\012\024\013\037\015\041\016\030" +
    "\017\014\021\022\025\006\027\004\033\031\034\011\046" +
    "\021\050\036\051\023\052\013\053\032\054\040\060\016" +
    "\001\002\000\066\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\025\ufff8\027\ufff8\033\ufff8\034" +
    "\ufff8\046\ufff8\047\140\050\ufff8\051\ufff8\052\ufff8\053\ufff8" +
    "\054\ufff8\060\ufff8\001\002\000\060\004\005\005\010\006" +
    "\012\007\027\010\025\011\035\012\024\013\037\015\041" +
    "\016\030\017\014\021\022\025\006\027\004\033\031\034" +
    "\011\046\021\050\036\051\023\052\013\053\032\054\040" +
    "\060\016\001\002\000\066\002\ufff7\004\ufff7\005\ufff7\006" +
    "\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7" +
    "\016\ufff7\017\ufff7\020\ufff7\021\ufff7\025\ufff7\027\ufff7\033" +
    "\ufff7\034\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7" +
    "\053\ufff7\054\ufff7\060\ufff7\001\002\000\066\002\ufffd\004" +
    "\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021\ufffd\025" +
    "\ufffd\027\ufffd\033\ufffd\034\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\060\ufffd\001\002\000" +
    "\036\022\uffdb\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\036\uffdb\037\uffdb\055\uffdb\056\uffdb\057" +
    "\uffdb\061\uffdb\001\002\000\042\022\uffdc\024\uffdc\025\uffdc" +
    "\026\054\027\047\030\052\031\055\032\051\033\062\034" +
    "\060\036\uffdc\037\uffdc\055\uffdc\056\uffdc\057\uffdc\061\uffdc" +
    "\001\002\000\064\002\001\004\001\005\001\006\001\007" +
    "\001\010\001\011\001\012\001\013\001\015\001\016\001" +
    "\017\001\020\001\021\001\025\001\027\001\033\001\034" +
    "\001\046\001\050\001\051\001\052\001\053\001\054\001" +
    "\060\001\001\002\000\004\002\000\001\002\000\060\004" +
    "\005\005\010\006\012\007\027\010\025\011\035\012\024" +
    "\013\037\015\041\016\030\017\014\021\022\025\006\027" +
    "\004\033\031\034\011\046\021\050\036\051\023\052\013" +
    "\053\032\054\040\060\016\001\002\000\062\004\005\005" +
    "\010\006\012\007\027\010\025\011\035\012\024\013\037" +
    "\015\041\016\030\017\014\020\151\021\022\025\006\027" +
    "\004\033\031\034\011\046\021\050\036\051\023\052\013" +
    "\053\032\054\040\060\016\001\002\000\066\002\ufff5\004" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\025" +
    "\ufff5\027\ufff5\033\ufff5\034\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\054\ufff5\060\ufff5\001\002\000" +
    "\030\004\005\011\035\012\024\013\037\015\041\016\030" +
    "\021\022\027\004\033\031\034\011\060\016\001\002\000" +
    "\034\022\154\026\054\027\047\030\052\031\055\032\051" +
    "\033\062\034\060\036\045\037\050\056\044\057\063\061" +
    "\053\001\002\000\060\004\005\005\010\006\012\007\027" +
    "\010\025\011\035\012\024\013\037\015\041\016\030\017" +
    "\014\021\022\025\006\027\004\033\031\034\011\046\021" +
    "\050\036\051\023\052\013\053\032\054\040\060\016\001" +
    "\002\000\066\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\010\ufffa\011\ufffa\012\ufffa\013\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\020\ufffa\021\ufffa\025\ufffa\027\ufffa\033\ufffa\034\ufffa" +
    "\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054" +
    "\ufffa\060\ufffa\001\002\000\010\023\157\024\uffeb\025\uffeb" +
    "\001\002\000\030\004\005\011\035\012\024\013\037\015" +
    "\041\016\030\021\022\027\004\033\031\034\011\060\016" +
    "\001\002\000\036\024\uffea\025\uffea\026\054\027\047\030" +
    "\052\031\055\032\051\033\062\034\060\036\045\037\050" +
    "\056\044\057\063\061\053\001\002\000\030\004\005\011" +
    "\035\012\024\013\037\015\041\016\030\021\022\027\004" +
    "\033\031\034\011\060\016\001\002\000\042\022\uffe5\024" +
    "\uffe5\025\uffe5\026\054\027\047\030\052\031\055\032\051" +
    "\033\062\034\060\036\045\037\050\055\uffe5\056\044\057" +
    "\063\061\053\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\160\000\020\002\014\003\025\004\017\011\032\012" +
    "\006\016\016\020\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\146\001\001\000\016\003\144\004\017\011" +
    "\032\012\006\016\016\020\033\001\001\000\010\004\143" +
    "\016\016\020\033\001\001\000\010\004\142\016\016\020" +
    "\033\001\001\000\012\013\055\014\063\015\060\017\045" +
    "\001\001\000\002\001\001\000\012\004\127\012\126\016" +
    "\016\020\033\001\001\000\016\003\120\004\017\011\032" +
    "\012\006\016\016\020\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\116\016\016\020" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\010\074\001\001\000\002\001\001\000" +
    "\016\003\041\004\017\011\032\012\006\016\016\020\033" +
    "\001\001\000\002\001\001\000\010\004\042\016\016\020" +
    "\033\001\001\000\012\013\055\014\063\015\060\017\045" +
    "\001\001\000\010\004\073\016\016\020\033\001\001\000" +
    "\010\004\072\016\016\020\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\071\016\016\020\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\004\070" +
    "\016\016\020\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\067\016\016\020\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\004\066\016\016\020" +
    "\033\001\001\000\002\001\001\000\010\004\065\016\016" +
    "\020\033\001\001\000\010\004\064\016\016\020\033\001" +
    "\001\000\012\013\055\014\063\015\060\017\045\001\001" +
    "\000\012\013\055\014\063\015\060\017\045\001\001\000" +
    "\012\013\055\014\063\015\060\017\045\001\001\000\012" +
    "\013\055\014\063\015\060\017\045\001\001\000\012\013" +
    "\055\014\063\015\060\017\045\001\001\000\012\013\055" +
    "\014\063\015\060\017\045\001\001\000\012\013\055\014" +
    "\063\015\060\017\045\001\001\000\012\013\055\014\063" +
    "\015\060\017\045\001\001\000\002\001\001\000\016\004" +
    "\077\005\076\011\100\012\006\016\016\020\033\001\001" +
    "\000\002\001\001\000\012\013\055\014\063\015\060\017" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\104\016\016\020\033\001\001\000" +
    "\012\013\055\014\063\015\060\017\045\001\001\000\012" +
    "\004\107\006\106\016\016\020\033\001\001\000\002\001" +
    "\001\000\012\013\055\014\063\015\060\017\045\001\001" +
    "\000\012\004\111\007\112\016\016\020\033\001\001\000" +
    "\012\013\055\014\063\015\060\017\045\001\001\000\002" +
    "\001\001\000\016\003\114\004\017\011\032\012\006\016" +
    "\016\020\033\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\013\055\014\063\015\060\017\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\123\016\016\020\033\001\001\000\012\013\055\014" +
    "\063\015\060\017\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\055\014\063\015" +
    "\060\017\045\001\001\000\002\001\001\000\010\004\132" +
    "\016\016\020\033\001\001\000\012\013\055\014\063\015" +
    "\060\017\045\001\001\000\010\004\134\016\016\020\033" +
    "\001\001\000\012\013\055\014\063\015\060\017\045\001" +
    "\001\000\016\003\136\004\017\011\032\012\006\016\016" +
    "\020\033\001\001\000\002\001\001\000\016\003\140\004" +
    "\017\011\032\012\006\016\016\020\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\013\055\014\063\015" +
    "\060\017\045\001\001\000\012\013\055\014\063\015\060" +
    "\017\045\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\002\147\003\025\004\017\011\032\012\006\016\016" +
    "\020\033\001\001\000\016\003\144\004\017\011\032\012" +
    "\006\016\016\020\033\001\001\000\002\001\001\000\010" +
    "\004\152\016\016\020\033\001\001\000\012\013\055\014" +
    "\063\015\060\017\045\001\001\000\016\003\154\004\017" +
    "\011\032\012\006\016\016\020\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\157\016\016\020\033" +
    "\001\001\000\012\013\055\014\063\015\060\017\045\001" +
    "\001\000\010\004\161\016\016\020\033\001\001\000\012" +
    "\013\055\014\063\015\060\017\045\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


    //TABLA DE SIMBOLOS;
    action_obj.tabla = new TablaSimbolos();
    //BLOQUE DONDE ESTOY
    action_obj.bloqueActual = 0; 
    //CONTADOR DE BLOQUES
    action_obj.idBloque = 0;

    }




    public void syntax_error(Symbol cur_token) {;}

    public void unrecovered_syntax_error(Symbol cur_token) {
        System.err.println("Syntax Error. Línea: " + PLXC.lex.getLine() + " Columna: " + PLXC.lex.getColumn());
        PLXC.out.println("# Syntax Error");
        PLXC.out.println("error;");
        PLXC.out.println("halt;");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    TablaSimbolos tabla;

    Integer bloqueActual;
    Integer idBloque;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Bloque RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    b.add(s);
                    RESULT = b;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= lista_sentencias EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_sentencias ::= sentencia 
            {
              Bloque RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Bloque b = new Bloque(PLXC.lex.getLine());
                    b.add(s);
                    RESULT = b;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencia ::= lista_declaracion PYC 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = l;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= exp PYC 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = e;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= REPEAT sentencia exp TIMES 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
             
                RESULT = new SentREPEAT(PLXC.lex.getLine(),e,s);
                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= FOR bloque_begin AP begin_for PYC condicion_for PYC act_for CP sentencia 
            {
              Instruccion RESULT =null;
		int bloqueAnteriorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bloqueAnteriorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer bloqueAnterior = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tabla.eliminarBloque(bloqueActual);
                bloqueActual = bloqueAnterior;
                RESULT = new SentFORC(PLXC.lex.getLine(), i, c, a, s);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= WHILE AP exp CP sentencia 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SentWHILE(PLXC.lex.getLine(), e, s);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= DO sentencia WHILE AP exp CP PYC 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                RESULT = new SentDOWHILE(PLXC.lex.getLine(), e, s);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= IF AP exp CP sentencia 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SentIF(PLXC.lex.getLine(), e, s, null);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= IF AP exp CP sentencia ELSE sentencia 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SentIF(PLXC.lex.getLine(), e, s1, s2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= PRINT exp PYC 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new LlamadaMetodo(
                    PLXC.lex.getLine(),
                    e,
                    Metodo.MOSTRAR,
                    null
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= ALL bloque_begin lista_sentencias CLL 
            {
              Instruccion RESULT =null;
		int bloqueAnteriorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueAnteriorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer bloqueAnterior = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tabla.eliminarBloque(bloqueActual);
                bloqueActual = bloqueAnterior; // Vuelvo al bloque anterior

                RESULT = l;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= PYC 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // begin_for ::= lista_declaracion 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_for",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // begin_for ::= exp 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_for",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // begin_for ::= 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_for",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // condicion_for ::= exp 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_for",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // condicion_for ::= 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_for",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // act_for ::= exp 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("act_for",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // act_for ::= 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("act_for",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloque_begin ::= 
            {
              Integer RESULT =null;
		
    RESULT = bloqueActual; // Guardo el bloque en el que estaba
    idBloque++;
    bloqueActual = idBloque;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_begin",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_declaracion ::= tipo IDENT 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Variable v = new Variable(i, bloqueActual, true, t);
                            tabla.declararVariable(PLXC.lex.getLine(), v);
                            RESULT = new ListaVar(PLXC.lex.getLine(), t);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // lista_declaracion ::= tipo IDENT ASIG exp 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Variable v = new Variable(i, bloqueActual, true, t);
                            tabla.declararVariable(PLXC.lex.getLine(), v);

                            ListaVar l = new ListaVar(PLXC.lex.getLine(), t);
                            l.add(
                                new LlamadaMetodo(
                                    PLXC.lex.getLine(),
                                    new ExpVariable(PLXC.lex.getLine(), v),
                                    Metodo.CREAR_VARIABLE,
                                    new Instruccion[]{e}
                                )
                            );

                            RESULT = l;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // lista_declaracion ::= lista_declaracion COMA IDENT 
            {
              ListaVar RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Variable v = new Variable(i, bloqueActual, true, l.getTipo());
                            tabla.declararVariable(PLXC.lex.getLine(), v);
                            RESULT = l;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // lista_declaracion ::= lista_declaracion COMA IDENT ASIG exp 
            {
              ListaVar RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Variable v = new Variable(i, bloqueActual, true, l.getTipo());
                            tabla.declararVariable(PLXC.lex.getLine(), v);

                            l.add(
                                new LlamadaMetodo(
                                    PLXC.lex.getLine(),
                                    new ExpVariable(PLXC.lex.getLine(), v),
                                    Metodo.CREAR_VARIABLE,
                                    new Instruccion[]{e}
                                )
                            );

                            RESULT = l;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= literal 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ExpLiteral(PLXC.lex.getLine(), l);            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= IDENT 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Objeto obj = tabla.buscar(i);

            if(obj == null) {
                throw new ParseException("Variable <" + i + "> no fue declarada", PLXC.lex.getLine());
            }

            RESULT = new ExpVariable(PLXC.lex.getLine(), (Variable) obj);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= IDENT ASIG exp 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Objeto obj = tabla.buscar(i);

            if(obj == null) {
                throw new ParseException("Variable <" + i + "> no fue declarada", PLXC.lex.getLine());
            }

            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                new ExpVariable(PLXC.lex.getLine(), (Variable) obj),
                Metodo.ASIGNAR,
                new Instruccion[]{e}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp DESPDER exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                Metodo.DESPDERECHA,
                new Instruccion[]{e2}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= exp DESPIZQ exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
           
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                Metodo.DESPIQUIERDA,
                new Instruccion[]{e2}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= exp op_aditivo exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                op,
                new Instruccion[]{e2}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= exp op_mult exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                op,
                new Instruccion[]{e2}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp op_relacional exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                op,
                new Instruccion[]{e2}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp IMPLICACION exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e1, Metodo.IMPLICACION, new Instruccion[]{e2});
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= exp AND exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new CortoCircuito(
                PLXC.lex.getLine(),
                e1,
                Metodo.AND,
                e2
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= exp OR exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new CortoCircuito(
                PLXC.lex.getLine(),
                e1,
                Metodo.OR,
                e2
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= NOT exp 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e,
                Metodo.NOT,
                null
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= op_unario exp 
            {
              Instruccion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e,
                op,
                null
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= exp op_unario_after 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new CopiaYLlama(
                PLXC.lex.getLine(),
                e,
                op,
                null
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= AP exp CP 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= AP tipo CP exp 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ExpTipo et = new ExpTipo(PLXC.lex.getLine(), t);
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e,
                Metodo.CAST,
                new Instruccion[]{et}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op_aditivo ::= MAS 
            {
              String RESULT =null;
		 RESULT = Metodo.SUMA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aditivo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op_aditivo ::= MENOS 
            {
              String RESULT =null;
		 RESULT = Metodo.RESTA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aditivo",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op_mult ::= MULT 
            {
              String RESULT =null;
		 RESULT = Metodo.PRODUCTO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_mult",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op_mult ::= DIV 
            {
              String RESULT =null;
		 RESULT = Metodo.DIVISION; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_mult",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op_mult ::= MOD 
            {
              String RESULT =null;
		 RESULT = Metodo.MODULO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_mult",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // op_unario ::= MENOS 
            {
              String RESULT =null;
		 RESULT = Metodo.OPUESTO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // op_unario ::= MASMAS 
            {
              String RESULT =null;
		 RESULT = Metodo.SIGUIENTE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op_unario ::= MENOSMENOS 
            {
              String RESULT =null;
		 RESULT = Metodo.ANTERIOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op_unario_after ::= MASMAS 
            {
              String RESULT =null;
		 RESULT = Metodo.SIGUIENTE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario_after",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op_unario_after ::= MENOSMENOS 
            {
              String RESULT =null;
		 RESULT = Metodo.ANTERIOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario_after",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = TipoInt.instancia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = TipoChar.instancia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		 RESULT = TipoReal.instancia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = TipoBool.instancia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // literal ::= ENTERO 
            {
              Literal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(bloqueActual, TipoInt.instancia, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // literal ::= CARACTER 
            {
              Literal RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(bloqueActual, TipoChar.instancia, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // literal ::= REAL 
            {
              Literal RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(bloqueActual, TipoReal.instancia, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // literal ::= BOOLTRUE 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(bloqueActual, TipoBool.instancia, Integer.valueOf("1")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // literal ::= BOOLFALSE 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(bloqueActual, TipoBool.instancia, Integer.valueOf("0")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
