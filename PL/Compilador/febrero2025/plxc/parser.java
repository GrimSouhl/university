
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615
//----------------------------------------------------

import java_cup.runtime.*;
import java.text.ParseException;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\120\000\002\007\004\000\002\002\004\000\002\007" +
    "\003\000\002\010\004\000\002\010\007\000\002\010\004" +
    "\000\002\010\014\000\002\010\007\000\002\010\011\000" +
    "\002\010\007\000\002\010\011\000\002\010\005\000\002" +
    "\010\006\000\002\010\003\000\002\005\004\000\002\005" +
    "\003\000\002\002\013\000\002\004\004\000\002\004\002" +
    "\000\002\006\003\000\002\006\003\000\002\006\002\000" +
    "\002\003\004\000\002\003\002\000\002\012\003\000\002" +
    "\012\003\000\002\012\002\000\002\013\003\000\002\013" +
    "\002\000\002\014\003\000\002\014\002\000\002\015\002" +
    "\000\002\016\004\000\002\016\006\000\002\016\005\000" +
    "\002\016\007\000\002\011\003\000\002\011\003\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\005\000\002\011\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\004\000\002" +
    "\011\004\000\002\011\004\000\002\011\005\000\002\011" +
    "\006\000\002\021\003\000\002\021\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\022\003\000\002\022\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\024\003\000\002\024\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\062\004\005\005\011\006\012\007\031\010" +
    "\026\011\040\012\025\013\042\015\044\016\032\017\015" +
    "\021\023\025\006\027\004\033\034\034\014\046\022\050" +
    "\041\051\024\052\013\053\036\054\043\062\007\070\017" +
    "\001\002\000\032\004\uffbf\011\uffbf\012\uffbf\013\uffbf\015" +
    "\uffbf\016\uffbf\021\uffbf\027\uffbf\033\uffbf\034\uffbf\062\uffbf" +
    "\070\uffbf\001\002\000\076\022\uffdc\023\220\024\uffdc\025" +
    "\uffdc\026\uffdc\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc" +
    "\034\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\055\uffdc\056\uffdc\057\uffdc\062\uffdc" +
    "\064\uffdc\065\uffdc\066\uffdc\067\uffdc\071\uffdc\072\uffdc\073" +
    "\uffdc\001\002\000\070\002\ufff4\004\ufff4\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\025\ufff4\027\ufff4\033\ufff4" +
    "\034\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4\053" +
    "\ufff4\054\ufff4\062\ufff4\070\ufff4\001\002\000\010\004\uffec" +
    "\060\204\061\202\001\002\000\004\004\177\001\002\000" +
    "\006\004\uffba\022\uffba\001\002\000\006\004\uffb9\022\uffb9" +
    "\001\002\000\004\021\173\001\002\000\032\004\uffbd\011" +
    "\uffbd\012\uffbd\013\uffbd\015\uffbd\016\uffbd\021\uffbd\027\uffbd" +
    "\033\uffbd\034\uffbd\062\uffbd\070\uffbd\001\002\000\062\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\015\uffe2\016\uffe2\017\uffe2\021\uffe2\025\uffe2\027" +
    "\uffe2\033\uffe2\034\uffe2\046\uffe2\050\uffe2\051\uffe2\052\uffe2" +
    "\053\uffe2\054\uffe2\062\uffe2\070\uffe2\001\002\000\064\002" +
    "\167\004\005\005\011\006\012\007\031\010\026\011\040" +
    "\012\025\013\042\015\044\016\032\017\015\021\023\025" +
    "\006\027\004\033\034\034\014\046\022\050\041\051\024" +
    "\052\013\053\036\054\043\062\007\070\017\001\002\000" +
    "\032\004\005\011\040\012\025\013\042\015\044\016\032" +
    "\021\023\027\004\033\034\034\014\062\007\070\017\001" +
    "\002\000\032\004\005\011\040\012\025\013\042\015\044" +
    "\016\032\021\023\027\004\033\034\034\014\062\007\070" +
    "\017\001\002\000\054\025\163\026\076\027\052\030\064" +
    "\031\066\032\050\033\072\034\057\036\060\037\061\040" +
    "\053\041\056\042\063\043\071\044\054\045\077\066\051" +
    "\067\055\071\074\072\070\073\075\001\002\000\004\021" +
    "\155\001\002\000\042\004\005\005\011\006\012\007\031" +
    "\010\026\011\040\012\025\013\042\015\044\016\032\021" +
    "\023\027\004\033\034\034\014\062\007\070\017\001\002" +
    "\000\062\004\005\005\011\006\012\007\031\010\026\011" +
    "\040\012\025\013\042\015\044\016\032\017\015\021\023" +
    "\025\006\027\004\033\034\034\014\046\022\050\041\051" +
    "\024\052\013\053\036\054\043\062\007\070\017\001\002" +
    "\000\074\022\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030" +
    "\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\055" +
    "\uffb5\056\uffb5\057\uffb5\062\uffb5\064\uffb5\065\uffb5\066\uffb5" +
    "\067\uffb5\071\uffb5\072\uffb5\073\uffb5\001\002\000\006\004" +
    "\uffb7\022\uffb7\001\002\000\006\056\140\062\007\001\002" +
    "\000\066\002\uffff\004\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\012\uffff\013\uffff\015\uffff\016\uffff\017\uffff" +
    "\020\uffff\021\uffff\025\uffff\027\uffff\033\uffff\034\uffff\046" +
    "\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff\062\uffff" +
    "\070\uffff\001\002\000\006\004\uffb8\022\uffb8\001\002\000" +
    "\074\022\uffb3\024\uffb3\025\uffb3\026\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\036\uffb3\037\uffb3\040" +
    "\uffb3\041\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\055\uffb3" +
    "\056\uffb3\057\uffb3\062\uffb3\064\uffb3\065\uffb3\066\uffb3\067" +
    "\uffb3\071\uffb3\072\uffb3\073\uffb3\001\002\000\006\056\ufff2" +
    "\062\ufff2\001\002\000\032\004\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\015\uffbe\016\uffbe\021\uffbe\027\uffbe\033\uffbe\034\uffbe" +
    "\062\uffbe\070\uffbe\001\002\000\006\024\120\025\136\001" +
    "\002\000\032\004\005\011\040\012\025\013\042\015\044" +
    "\016\032\021\023\027\004\033\034\034\014\062\007\070" +
    "\017\001\002\000\074\022\uffdd\024\uffdd\025\uffdd\026\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\034\uffdd\036" +
    "\uffdd\037\uffdd\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd" +
    "\045\uffdd\055\uffdd\056\uffdd\057\uffdd\062\uffdd\064\uffdd\065" +
    "\uffdd\066\uffdd\067\uffdd\071\uffdd\072\uffdd\073\uffdd\001\002" +
    "\000\074\022\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030" +
    "\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6\036\uffb6\037\uffb6" +
    "\040\uffb6\041\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\062\uffb6\064\uffb6\065\uffb6\066\uffb6" +
    "\067\uffb6\071\uffb6\072\uffb6\073\uffb6\001\002\000\004\021" +
    "\uffe2\001\002\000\074\022\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\036" +
    "\uffb4\037\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\055\uffb4\056\uffb4\057\uffb4\062\uffb4\064\uffb4\065" +
    "\uffb4\066\uffb4\067\uffb4\071\uffb4\072\uffb4\073\uffb4\001\002" +
    "\000\062\004\005\005\011\006\012\007\031\010\026\011" +
    "\040\012\025\013\042\015\044\016\032\017\015\021\023" +
    "\025\006\027\004\033\034\034\014\046\022\050\041\051" +
    "\024\052\013\053\036\054\043\062\007\070\017\001\002" +
    "\000\074\022\uffb2\024\uffb2\025\uffb2\026\uffb2\027\uffb2\030" +
    "\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\036\uffb2\037\uffb2" +
    "\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2\055" +
    "\uffb2\056\uffb2\057\uffb2\062\uffb2\064\uffb2\065\uffb2\066\uffb2" +
    "\067\uffb2\071\uffb2\072\uffb2\073\uffb2\001\002\000\032\004" +
    "\005\011\040\012\025\013\042\015\044\016\032\021\023" +
    "\027\004\033\034\034\014\062\007\070\017\001\002\000" +
    "\054\026\076\027\052\030\064\031\066\032\050\033\072" +
    "\034\057\036\060\037\061\040\053\041\056\042\063\043" +
    "\071\044\054\045\077\055\047\066\051\067\055\071\074" +
    "\072\070\073\075\001\002\000\004\025\112\001\002\000" +
    "\032\004\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\016\uffc6" +
    "\021\uffc6\027\uffc6\033\uffc6\034\uffc6\062\uffc6\070\uffc6\001" +
    "\002\000\032\004\005\011\040\012\025\013\042\015\044" +
    "\016\032\021\023\027\004\033\034\034\014\062\007\070" +
    "\017\001\002\000\032\004\uffc9\011\uffc9\012\uffc9\013\uffc9" +
    "\015\uffc9\016\uffc9\021\uffc9\027\uffc9\033\uffc9\034\uffc9\062" +
    "\uffc9\070\uffc9\001\002\000\032\004\uffc5\011\uffc5\012\uffc5" +
    "\013\uffc5\015\uffc5\016\uffc5\021\uffc5\027\uffc5\033\uffc5\034" +
    "\uffc5\062\uffc5\070\uffc5\001\002\000\032\004\uffc1\011\uffc1" +
    "\012\uffc1\013\uffc1\015\uffc1\016\uffc1\021\uffc1\027\uffc1\033" +
    "\uffc1\034\uffc1\062\uffc1\070\uffc1\001\002\000\032\004\005" +
    "\011\040\012\025\013\042\015\044\016\032\021\023\027" +
    "\004\033\034\034\014\062\007\070\017\001\002\000\032" +
    "\004\uffc4\011\uffc4\012\uffc4\013\uffc4\015\uffc4\016\uffc4\021" +
    "\uffc4\027\uffc4\033\uffc4\034\uffc4\062\uffc4\070\uffc4\001\002" +
    "\000\074\022\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\030" +
    "\uffbb\031\uffbb\032\uffbb\033\uffbb\034\uffbb\036\uffbb\037\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\055" +
    "\uffbb\056\uffbb\057\uffbb\062\uffbb\064\uffbb\065\uffbb\066\uffbb" +
    "\067\uffbb\071\uffbb\072\uffbb\073\uffbb\001\002\000\032\004" +
    "\005\011\040\012\025\013\042\015\044\016\032\021\023" +
    "\027\004\033\034\034\014\062\007\070\017\001\002\000" +
    "\032\004\005\011\040\012\025\013\042\015\044\016\032" +
    "\021\023\027\004\033\034\034\014\062\007\070\017\001" +
    "\002\000\032\004\005\011\040\012\025\013\042\015\044" +
    "\016\032\021\023\027\004\033\034\034\014\062\007\070" +
    "\017\001\002\000\032\004\uffc3\011\uffc3\012\uffc3\013\uffc3" +
    "\015\uffc3\016\uffc3\021\uffc3\027\uffc3\033\uffc3\034\uffc3\062" +
    "\uffc3\070\uffc3\001\002\000\032\004\uffc8\011\uffc8\012\uffc8" +
    "\013\uffc8\015\uffc8\016\uffc8\021\uffc8\027\uffc8\033\uffc8\034" +
    "\uffc8\062\uffc8\070\uffc8\001\002\000\032\004\005\011\040" +
    "\012\025\013\042\015\044\016\032\021\023\027\004\033" +
    "\034\034\014\062\007\070\017\001\002\000\032\004\uffc7" +
    "\011\uffc7\012\uffc7\013\uffc7\015\uffc7\016\uffc7\021\uffc7\027" +
    "\uffc7\033\uffc7\034\uffc7\062\uffc7\070\uffc7\001\002\000\032" +
    "\004\005\011\040\012\025\013\042\015\044\016\032\021" +
    "\023\027\004\033\034\034\014\062\007\070\017\001\002" +
    "\000\032\004\005\011\040\012\025\013\042\015\044\016" +
    "\032\021\023\027\004\033\034\034\014\062\007\070\017" +
    "\001\002\000\032\004\uffc2\011\uffc2\012\uffc2\013\uffc2\015" +
    "\uffc2\016\uffc2\021\uffc2\027\uffc2\033\uffc2\034\uffc2\062\uffc2" +
    "\070\uffc2\001\002\000\074\022\uffbc\024\uffbc\025\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044" +
    "\uffbc\045\uffbc\055\uffbc\056\uffbc\057\uffbc\062\uffbc\064\uffbc" +
    "\065\uffbc\066\uffbc\067\uffbc\071\uffbc\072\uffbc\073\uffbc\001" +
    "\002\000\074\022\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\036\uffcd\037" +
    "\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\062\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\071\uffcd\072\uffcd\073\uffcd\001\002\000\032" +
    "\004\005\011\040\012\025\013\042\015\044\016\032\021" +
    "\023\027\004\033\034\034\014\062\007\070\017\001\002" +
    "\000\032\004\005\011\040\012\025\013\042\015\044\016" +
    "\032\021\023\027\004\033\034\034\014\062\007\070\017" +
    "\001\002\000\032\004\uffca\011\uffca\012\uffca\013\uffca\015" +
    "\uffca\016\uffca\021\uffca\027\uffca\033\uffca\034\uffca\062\uffca" +
    "\070\uffca\001\002\000\032\004\uffc0\011\uffc0\012\uffc0\013" +
    "\uffc0\015\uffc0\016\uffc0\021\uffc0\027\uffc0\033\uffc0\034\uffc0" +
    "\062\uffc0\070\uffc0\001\002\000\074\022\uffd1\024\uffd1\025" +
    "\uffd1\026\076\027\052\030\064\031\066\032\050\033\072" +
    "\034\057\036\uffd1\037\uffd1\040\053\041\056\042\063\043" +
    "\071\044\054\045\077\055\uffd1\056\uffd1\057\uffd1\062\uffd1" +
    "\064\uffd1\065\uffd1\066\051\067\uffd1\071\uffd1\072\070\073" +
    "\uffd1\001\002\000\074\022\uffd4\024\uffd4\025\uffd4\026\076" +
    "\027\052\030\064\031\066\032\050\033\072\034\057\036" +
    "\uffd4\037\uffd4\040\053\041\056\042\063\043\071\044\054" +
    "\045\077\055\uffd4\056\uffd4\057\uffd4\062\uffd4\064\uffd4\065" +
    "\uffd4\066\051\067\055\071\074\072\070\073\075\001\002" +
    "\000\074\022\uffd3\024\uffd3\025\uffd3\026\076\027\052\030" +
    "\064\031\066\032\050\033\072\034\057\036\uffd3\037\uffd3" +
    "\040\053\041\056\042\063\043\071\044\054\045\077\055" +
    "\uffd3\056\uffd3\057\uffd3\062\uffd3\064\uffd3\065\uffd3\066\uffd3" +
    "\067\uffd3\071\uffd3\072\uffd3\073\uffd3\001\002\000\074\022" +
    "\uffd5\024\uffd5\025\uffd5\026\076\027\052\030\064\031\066" +
    "\032\050\033\072\034\057\036\uffd5\037\uffd5\040\uffd5\041" +
    "\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\055\uffd5\056\uffd5" +
    "\057\uffd5\062\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\071" +
    "\uffd5\072\uffd5\073\uffd5\001\002\000\074\022\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\064\031\066\032\050\033" +
    "\072\034\057\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7" +
    "\043\uffd7\044\uffd7\045\uffd7\055\uffd7\056\uffd7\057\uffd7\062" +
    "\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\071\uffd7\072\uffd7" +
    "\073\uffd7\001\002\000\074\022\uffd6\024\uffd6\025\uffd6\026" +
    "\uffd6\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\072\034\057" +
    "\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044" +
    "\uffd6\045\uffd6\055\uffd6\056\uffd6\057\uffd6\062\uffd6\064\uffd6" +
    "\065\uffd6\066\uffd6\067\uffd6\071\uffd6\072\uffd6\073\uffd6\001" +
    "\002\000\074\022\uffd9\024\uffd9\025\uffd9\026\076\027\052" +
    "\030\064\031\066\032\050\033\072\034\057\036\uffd9\037" +
    "\uffd9\040\053\041\056\042\063\043\071\044\054\045\077" +
    "\055\uffd9\056\uffd9\057\uffd9\062\uffd9\064\uffd9\065\uffd9\066" +
    "\051\067\055\071\074\072\070\073\075\001\002\000\074" +
    "\022\uffd8\024\uffd8\025\uffd8\026\076\027\052\030\064\031" +
    "\066\032\050\033\072\034\057\036\uffd8\037\uffd8\040\053" +
    "\041\056\042\063\043\071\044\054\045\077\055\uffd8\056" +
    "\uffd8\057\uffd8\062\uffd8\064\uffd8\065\uffd8\066\051\067\055" +
    "\071\074\072\070\073\075\001\002\000\074\022\uffd0\024" +
    "\uffd0\025\uffd0\026\076\027\052\030\064\031\066\032\050" +
    "\033\072\034\057\036\uffd0\037\uffd0\040\053\041\056\042" +
    "\063\043\071\044\054\045\077\055\uffd0\056\uffd0\057\uffd0" +
    "\062\uffd0\064\uffd0\065\uffd0\066\051\067\uffd0\071\uffd0\072" +
    "\070\073\075\001\002\000\074\022\uffd2\024\uffd2\025\uffd2" +
    "\026\076\027\052\030\064\031\066\032\050\033\072\034" +
    "\057\036\uffd2\037\uffd2\040\053\041\056\042\063\043\071" +
    "\044\054\045\077\055\uffd2\056\uffd2\057\uffd2\062\uffd2\064" +
    "\uffd2\065\uffd2\066\uffd2\067\uffd2\071\uffd2\072\070\073\uffd2" +
    "\001\002\000\070\002\ufffd\004\ufffd\005\ufffd\006\ufffd\007" +
    "\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\015\ufffd\016\ufffd" +
    "\017\ufffd\020\ufffd\021\ufffd\025\ufffd\027\ufffd\033\ufffd\034" +
    "\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd" +
    "\054\ufffd\062\ufffd\070\ufffd\001\002\000\004\021\114\001" +
    "\002\000\044\004\005\005\011\006\012\007\031\010\026" +
    "\011\040\012\025\013\042\015\044\016\032\021\023\025" +
    "\uffe7\027\004\033\034\034\014\062\007\070\017\001\002" +
    "\000\004\025\124\001\002\000\054\025\uffe8\026\076\027" +
    "\052\030\064\031\066\032\050\033\072\034\057\036\060" +
    "\037\061\040\053\041\056\042\063\043\071\044\054\045" +
    "\077\066\051\067\055\071\074\072\070\073\075\001\002" +
    "\000\006\024\120\025\uffe9\001\002\000\004\004\121\001" +
    "\002\000\010\023\122\024\uffdf\025\uffdf\001\002\000\032" +
    "\004\005\011\040\012\025\013\042\015\044\016\032\021" +
    "\023\027\004\033\034\034\014\062\007\070\017\001\002" +
    "\000\056\024\uffde\025\uffde\026\076\027\052\030\064\031" +
    "\066\032\050\033\072\034\057\036\060\037\061\040\053" +
    "\041\056\042\063\043\071\044\054\045\077\066\051\067" +
    "\055\071\074\072\070\073\075\001\002\000\034\004\005" +
    "\011\040\012\025\013\042\015\044\016\032\021\023\025" +
    "\uffe5\027\004\033\034\034\014\062\007\070\017\001\002" +
    "\000\004\025\127\001\002\000\054\025\uffe6\026\076\027" +
    "\052\030\064\031\066\032\050\033\072\034\057\036\060" +
    "\037\061\040\053\041\056\042\063\043\071\044\054\045" +
    "\077\066\051\067\055\071\074\072\070\073\075\001\002" +
    "\000\034\004\005\011\040\012\025\013\042\015\044\016" +
    "\032\021\023\022\uffe3\027\004\033\034\034\014\062\007" +
    "\070\017\001\002\000\004\022\132\001\002\000\054\022" +
    "\uffe4\026\076\027\052\030\064\031\066\032\050\033\072" +
    "\034\057\036\060\037\061\040\053\041\056\042\063\043" +
    "\071\044\054\045\077\066\051\067\055\071\074\072\070" +
    "\073\075\001\002\000\062\004\005\005\011\006\012\007" +
    "\031\010\026\011\040\012\025\013\042\015\044\016\032" +
    "\017\015\021\023\025\006\027\004\033\034\034\014\046" +
    "\022\050\041\051\024\052\013\053\036\054\043\062\007" +
    "\070\017\001\002\000\070\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\015\ufffb" +
    "\016\ufffb\017\ufffb\020\ufffb\021\ufffb\025\ufffb\027\ufffb\033" +
    "\ufffb\034\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb" +
    "\053\ufffb\054\ufffb\062\ufffb\070\ufffb\001\002\000\054\025" +
    "\135\026\076\027\052\030\064\031\066\032\050\033\072" +
    "\034\057\036\060\037\061\040\053\041\056\042\063\043" +
    "\071\044\054\045\077\066\051\067\055\071\074\072\070" +
    "\073\075\001\002\000\070\002\ufff6\004\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\015\ufff6" +
    "\016\ufff6\017\ufff6\020\ufff6\021\ufff6\025\ufff6\027\ufff6\033" +
    "\ufff6\034\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6" +
    "\053\ufff6\054\ufff6\062\ufff6\070\ufff6\001\002\000\070\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\025\ufffe\027\ufffe\033\ufffe\034\ufffe\046\ufffe\047\ufffe" +
    "\050\ufffe\051\ufffe\052\ufffe\053\ufffe\054\ufffe\062\ufffe\070" +
    "\ufffe\001\002\000\006\056\ufff3\062\ufff3\001\002\000\032" +
    "\004\005\011\040\012\025\013\042\015\044\016\032\021" +
    "\023\027\004\033\034\034\014\062\007\070\017\001\002" +
    "\000\074\022\uffdb\024\uffdb\025\uffdb\026\076\027\052\030" +
    "\064\031\066\032\050\033\072\034\057\036\060\037\061" +
    "\040\053\041\056\042\063\043\071\044\054\045\077\055" +
    "\uffdb\056\uffdb\057\uffdb\062\uffdb\064\uffdb\065\uffdb\066\051" +
    "\067\055\071\074\072\070\073\075\001\002\000\004\052" +
    "\143\001\002\000\004\021\144\001\002\000\032\004\005" +
    "\011\040\012\025\013\042\015\044\016\032\021\023\027" +
    "\004\033\034\034\014\062\007\070\017\001\002\000\054" +
    "\022\146\026\076\027\052\030\064\031\066\032\050\033" +
    "\072\034\057\036\060\037\061\040\053\041\056\042\063" +
    "\043\071\044\054\045\077\066\051\067\055\071\074\072" +
    "\070\073\075\001\002\000\004\025\147\001\002\000\070" +
    "\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011" +
    "\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9" +
    "\021\ufff9\025\ufff9\027\ufff9\033\ufff9\034\ufff9\046\ufff9\047" +
    "\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\054\ufff9\062\ufff9" +
    "\070\ufff9\001\002\000\004\022\153\001\002\000\054\022" +
    "\152\026\076\027\052\030\064\031\066\032\050\033\072" +
    "\034\057\036\060\037\061\040\053\041\056\042\063\043" +
    "\071\044\054\045\077\066\051\067\055\071\074\072\070" +
    "\073\075\001\002\000\074\022\uffcc\024\uffcc\025\uffcc\026" +
    "\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044" +
    "\uffcc\045\uffcc\055\uffcc\056\uffcc\057\uffcc\062\uffcc\064\uffcc" +
    "\065\uffcc\066\uffcc\067\uffcc\071\uffcc\072\uffcc\073\uffcc\001" +
    "\002\000\032\004\005\011\040\012\025\013\042\015\044" +
    "\016\032\021\023\027\004\033\034\034\014\062\007\070" +
    "\017\001\002\000\074\022\uffcb\024\uffcb\025\uffcb\026\uffcb" +
    "\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033\072\034\057\036" +
    "\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044\uffcb" +
    "\045\uffcb\055\uffcb\056\uffcb\057\uffcb\062\uffcb\064\uffcb\065" +
    "\uffcb\066\uffcb\067\uffcb\071\uffcb\072\uffcb\073\uffcb\001\002" +
    "\000\032\004\005\011\040\012\025\013\042\015\044\016" +
    "\032\021\023\027\004\033\034\034\014\062\007\070\017" +
    "\001\002\000\054\022\157\026\076\027\052\030\064\031" +
    "\066\032\050\033\072\034\057\036\060\037\061\040\053" +
    "\041\056\042\063\043\071\044\054\045\077\066\051\067" +
    "\055\071\074\072\070\073\075\001\002\000\062\004\005" +
    "\005\011\006\012\007\031\010\026\011\040\012\025\013" +
    "\042\015\044\016\032\017\015\021\023\025\006\027\004" +
    "\033\034\034\014\046\022\050\041\051\024\052\013\053" +
    "\036\054\043\062\007\070\017\001\002\000\070\002\ufff8" +
    "\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8" +
    "\025\ufff8\027\ufff8\033\ufff8\034\ufff8\046\ufff8\047\161\050" +
    "\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\062\ufff8\070\ufff8" +
    "\001\002\000\062\004\005\005\011\006\012\007\031\010" +
    "\026\011\040\012\025\013\042\015\044\016\032\017\015" +
    "\021\023\025\006\027\004\033\034\034\014\046\022\050" +
    "\041\051\024\052\013\053\036\054\043\062\007\070\017" +
    "\001\002\000\070\002\ufff7\004\ufff7\005\ufff7\006\ufff7\007" +
    "\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\025\ufff7\027\ufff7\033\ufff7\034" +
    "\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\054\ufff7\062\ufff7\070\ufff7\001\002\000\070\002\ufffc\004" +
    "\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\015\ufffc\016\ufffc\017\ufffc\020\ufffc\021\ufffc\025" +
    "\ufffc\027\ufffc\033\ufffc\034\ufffc\046\ufffc\047\ufffc\050\ufffc" +
    "\051\ufffc\052\ufffc\053\ufffc\054\ufffc\062\ufffc\070\ufffc\001" +
    "\002\000\070\022\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\042\uffce\043\uffce\044\uffce\045\uffce\055\uffce\056\uffce" +
    "\057\uffce\062\uffce\064\uffce\065\uffce\066\uffce\067\uffce\071" +
    "\uffce\072\uffce\073\uffce\001\002\000\074\022\uffcf\024\uffcf" +
    "\025\uffcf\026\076\027\052\030\064\031\066\032\050\033" +
    "\072\034\057\036\uffcf\037\uffcf\040\053\041\056\042\063" +
    "\043\071\044\054\045\077\055\uffcf\056\uffcf\057\uffcf\062" +
    "\uffcf\064\uffcf\065\uffcf\066\uffcf\067\uffcf\071\uffcf\072\uffcf" +
    "\073\uffcf\001\002\000\066\002\001\004\001\005\001\006" +
    "\001\007\001\010\001\011\001\012\001\013\001\015\001" +
    "\016\001\017\001\020\001\021\001\025\001\027\001\033" +
    "\001\034\001\046\001\050\001\051\001\052\001\053\001" +
    "\054\001\062\001\070\001\001\002\000\004\002\000\001" +
    "\002\000\062\004\005\005\011\006\012\007\031\010\026" +
    "\011\040\012\025\013\042\015\044\016\032\017\015\021" +
    "\023\025\006\027\004\033\034\034\014\046\022\050\041" +
    "\051\024\052\013\053\036\054\043\062\007\070\017\001" +
    "\002\000\064\004\005\005\011\006\012\007\031\010\026" +
    "\011\040\012\025\013\042\015\044\016\032\017\015\020" +
    "\172\021\023\025\006\027\004\033\034\034\014\046\022" +
    "\050\041\051\024\052\013\053\036\054\043\062\007\070" +
    "\017\001\002\000\070\002\ufff5\004\ufff5\005\ufff5\006\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5\016" +
    "\ufff5\017\ufff5\020\ufff5\021\ufff5\025\ufff5\027\ufff5\033\ufff5" +
    "\034\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\052\ufff5\053" +
    "\ufff5\054\ufff5\062\ufff5\070\ufff5\001\002\000\032\004\005" +
    "\011\040\012\025\013\042\015\044\016\032\021\023\027" +
    "\004\033\034\034\014\062\007\070\017\001\002\000\054" +
    "\022\175\026\076\027\052\030\064\031\066\032\050\033" +
    "\072\034\057\036\060\037\061\040\053\041\056\042\063" +
    "\043\071\044\054\045\077\066\051\067\055\071\074\072" +
    "\070\073\075\001\002\000\062\004\005\005\011\006\012" +
    "\007\031\010\026\011\040\012\025\013\042\015\044\016" +
    "\032\017\015\021\023\025\006\027\004\033\034\034\014" +
    "\046\022\050\041\051\024\052\013\053\036\054\043\062" +
    "\007\070\017\001\002\000\070\002\ufffa\004\ufffa\005\ufffa" +
    "\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\013\ufffa\015" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\021\ufffa\025\ufffa\027\ufffa" +
    "\033\ufffa\034\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052" +
    "\ufffa\053\ufffa\054\ufffa\062\ufffa\070\ufffa\001\002\000\010" +
    "\023\200\024\uffe1\025\uffe1\001\002\000\032\004\005\011" +
    "\040\012\025\013\042\015\044\016\032\021\023\027\004" +
    "\033\034\034\014\062\007\070\017\001\002\000\056\024" +
    "\uffe0\025\uffe0\026\076\027\052\030\064\031\066\032\050" +
    "\033\072\034\057\036\060\037\061\040\053\041\056\042" +
    "\063\043\071\044\054\045\077\066\051\067\055\071\074" +
    "\072\070\073\075\001\002\000\004\004\uffed\001\002\000" +
    "\004\004\205\001\002\000\004\004\uffee\001\002\000\004" +
    "\063\206\001\002\000\032\004\005\011\040\012\025\013" +
    "\042\015\044\016\032\021\023\027\004\033\034\034\014" +
    "\062\007\070\017\001\002\000\054\026\076\027\052\030" +
    "\064\031\066\032\050\033\072\034\057\036\060\037\061" +
    "\040\053\041\056\042\063\043\071\044\054\045\077\064" +
    "\210\066\051\067\055\071\074\072\070\073\075\001\002" +
    "\000\032\004\005\011\040\012\025\013\042\015\044\016" +
    "\032\021\023\027\004\033\034\034\014\062\007\070\017" +
    "\001\002\000\062\026\076\027\052\030\064\031\066\032" +
    "\050\033\072\034\057\036\060\037\061\040\053\041\056" +
    "\042\063\043\071\044\054\045\077\056\uffef\057\uffef\062" +
    "\uffef\065\213\066\051\067\055\071\074\072\070\073\075" +
    "\001\002\000\010\056\uffea\057\215\062\uffea\001\002\000" +
    "\032\004\005\011\040\012\025\013\042\015\044\016\032" +
    "\021\023\027\004\033\034\034\014\062\007\070\017\001" +
    "\002\000\060\026\076\027\052\030\064\031\066\032\050" +
    "\033\072\034\057\036\060\037\061\040\053\041\056\042" +
    "\063\043\071\044\054\045\077\056\ufff0\057\ufff0\062\ufff0" +
    "\066\051\067\055\071\074\072\070\073\075\001\002\000" +
    "\032\004\005\011\040\012\025\013\042\015\044\016\032" +
    "\021\023\027\004\033\034\034\014\062\007\070\017\001" +
    "\002\000\006\056\ufff1\062\ufff1\001\002\000\056\026\076" +
    "\027\052\030\064\031\066\032\050\033\072\034\057\036" +
    "\060\037\061\040\053\041\056\042\063\043\071\044\054" +
    "\045\077\056\uffeb\062\uffeb\066\051\067\055\071\074\072" +
    "\070\073\075\001\002\000\032\004\005\011\040\012\025" +
    "\013\042\015\044\016\032\021\023\027\004\033\034\034" +
    "\014\062\007\070\017\001\002\000\074\022\uffda\024\uffda" +
    "\025\uffda\026\076\027\052\030\064\031\066\032\050\033" +
    "\072\034\057\036\060\037\061\040\053\041\056\042\063" +
    "\043\071\044\054\045\077\055\uffda\056\uffda\057\uffda\062" +
    "\uffda\064\uffda\065\uffda\066\051\067\055\071\074\072\070" +
    "\073\075\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\217\000\024\002\032\005\026\007\015\010\027\011" +
    "\020\016\034\017\007\023\017\025\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\202\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\167\001\001\000\022\002\032\005\026\010\165\011\020" +
    "\016\034\017\007\023\017\025\036\001\001\000\014\002" +
    "\032\005\026\011\164\023\017\025\036\001\001\000\014" +
    "\002\032\005\026\011\163\023\017\025\036\001\001\000" +
    "\012\020\061\021\064\022\066\024\072\001\001\000\002" +
    "\001\001\000\016\002\032\005\026\011\150\017\147\023" +
    "\017\025\036\001\001\000\022\002\032\005\026\010\141" +
    "\011\020\016\034\017\007\023\017\025\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\002\136\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\032\005\026\011\133\023\017\025\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\112\001\001" +
    "\000\002\001\001\000\022\002\032\005\026\010\044\011" +
    "\020\016\034\017\007\023\017\025\036\001\001\000\002" +
    "\001\001\000\014\002\032\005\026\011\045\023\017\025" +
    "\036\001\001\000\012\020\061\021\064\022\066\024\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\032\005\026\011\110\023\017\025\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\032\005\026\011\107\023\017\025\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\002\032\005\026\011" +
    "\106\023\017\025\036\001\001\000\014\002\032\005\026" +
    "\011\105\023\017\025\036\001\001\000\014\002\032\005" +
    "\026\011\104\023\017\025\036\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\032\005\026\011\103\023" +
    "\017\025\036\001\001\000\002\001\001\000\014\002\032" +
    "\005\026\011\102\023\017\025\036\001\001\000\014\002" +
    "\032\005\026\011\101\023\017\025\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\002" +
    "\032\005\026\011\100\023\017\025\036\001\001\000\014" +
    "\002\032\005\026\011\077\023\017\025\036\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\020\061\021\064" +
    "\022\066\024\072\001\001\000\012\020\061\021\064\022" +
    "\066\024\072\001\001\000\012\020\061\021\064\022\066" +
    "\024\072\001\001\000\012\020\061\021\064\022\066\024" +
    "\072\001\001\000\012\020\061\021\064\022\066\024\072" +
    "\001\001\000\012\020\061\021\064\022\066\024\072\001" +
    "\001\000\012\020\061\021\064\022\066\024\072\001\001" +
    "\000\012\020\061\021\064\022\066\024\072\001\001\000" +
    "\012\020\061\021\064\022\066\024\072\001\001\000\012" +
    "\020\061\021\064\022\066\024\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\032\005\026\011\115" +
    "\012\114\016\116\017\007\023\017\025\036\001\001\000" +
    "\002\001\001\000\012\020\061\021\064\022\066\024\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\002\032\005\026\011\122\023\017\025\036" +
    "\001\001\000\012\020\061\021\064\022\066\024\072\001" +
    "\001\000\016\002\032\005\026\011\125\013\124\023\017" +
    "\025\036\001\001\000\002\001\001\000\012\020\061\021" +
    "\064\022\066\024\072\001\001\000\016\002\032\005\026" +
    "\011\130\014\127\023\017\025\036\001\001\000\002\001" +
    "\001\000\012\020\061\021\064\022\066\024\072\001\001" +
    "\000\022\002\032\005\026\010\132\011\020\016\034\017" +
    "\007\023\017\025\036\001\001\000\002\001\001\000\012" +
    "\020\061\021\064\022\066\024\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\002\032" +
    "\005\026\011\140\023\017\025\036\001\001\000\012\020" +
    "\061\021\064\022\066\024\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\002\032\005\026\011\144\023" +
    "\017\025\036\001\001\000\012\020\061\021\064\022\066" +
    "\024\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\020\061\021\064\022\066\024\072" +
    "\001\001\000\002\001\001\000\014\002\032\005\026\011" +
    "\153\023\017\025\036\001\001\000\012\020\061\021\064" +
    "\022\066\024\072\001\001\000\014\002\032\005\026\011" +
    "\155\023\017\025\036\001\001\000\012\020\061\021\064" +
    "\022\066\024\072\001\001\000\022\002\032\005\026\010" +
    "\157\011\020\016\034\017\007\023\017\025\036\001\001" +
    "\000\002\001\001\000\022\002\032\005\026\010\161\011" +
    "\020\016\034\017\007\023\017\025\036\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\020\061\021\064\022" +
    "\066\024\072\001\001\000\012\020\061\021\064\022\066" +
    "\024\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\032\005\026\007\170\010\027\011\020\016\034" +
    "\017\007\023\017\025\036\001\001\000\022\002\032\005" +
    "\026\010\165\011\020\016\034\017\007\023\017\025\036" +
    "\001\001\000\002\001\001\000\014\002\032\005\026\011" +
    "\173\023\017\025\036\001\001\000\012\020\061\021\064" +
    "\022\066\024\072\001\001\000\022\002\032\005\026\010" +
    "\175\011\020\016\034\017\007\023\017\025\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\002\032\005" +
    "\026\011\200\023\017\025\036\001\001\000\012\020\061" +
    "\021\064\022\066\024\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\032\005\026\011\206\023\017\025\036\001\001\000" +
    "\012\020\061\021\064\022\066\024\072\001\001\000\014" +
    "\002\032\005\026\011\210\023\017\025\036\001\001\000" +
    "\014\004\211\020\061\021\064\022\066\024\072\001\001" +
    "\000\004\003\215\001\001\000\014\002\032\005\026\011" +
    "\213\023\017\025\036\001\001\000\012\020\061\021\064" +
    "\022\066\024\072\001\001\000\014\002\032\005\026\011" +
    "\216\023\017\025\036\001\001\000\002\001\001\000\012" +
    "\020\061\021\064\022\066\024\072\001\001\000\014\002" +
    "\032\005\026\011\220\023\017\025\036\001\001\000\012" +
    "\020\061\021\064\022\066\024\072\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


    //TABLA DE SIMBOLOS;
    action_obj.tabla = new TablaSimbolos();
    //BLOQUE DONDE ESTOY
    action_obj.bloqueActual = 0; 
    //CONTADOR DE BLOQUES
    action_obj.idBloque = 0;

    }




    public void syntax_error(Symbol cur_token) {;}

    public void unrecovered_syntax_error(Symbol cur_token) {
        System.err.println("Syntax Error. Línea: " + PLXC.lex.getLine() + " Columna: " + PLXC.lex.getColumn());
        PLXC.out.println("# Syntax Error");
        PLXC.out.println("error;");
        PLXC.out.println("halt;");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



    TablaSimbolos tabla;

    Integer bloqueActual;
    Integer idBloque;


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // lista_sentencias ::= lista_sentencias sentencia 
            {
              Bloque RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque b = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    b.add(s);
                    RESULT = b;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= lista_sentencias EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque start_val = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // lista_sentencias ::= sentencia 
            {
              Bloque RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Bloque b = new Bloque(PLXC.lex.getLine());
                    b.add(s);
                    RESULT = b;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_sentencias",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // sentencia ::= lista_declaracion PYC 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = l;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sentencia ::= REPEAT sentencia exp TIMES PYC 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
            
                RESULT = new SentREPEAT(PLXC.lex.getLine(),e,s);
                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sentencia ::= exp PYC 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = e;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sentencia ::= FOR bloque_begin AP begin_for PYC condicion_for PYC act_for CP sentencia 
            {
              Instruccion RESULT =null;
		int bloqueAnteriorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int bloqueAnteriorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer bloqueAnterior = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Instruccion i = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                tabla.eliminarBloque(bloqueActual);
                bloqueActual = bloqueAnterior;
                RESULT = new SentFORC(PLXC.lex.getLine(), i, c, a, s);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sentencia ::= WHILE AP exp CP sentencia 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SentWHILE(PLXC.lex.getLine(), e, s);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sentencia ::= DO sentencia WHILE AP exp CP PYC 
            {
              Instruccion RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                RESULT = new SentDOWHILE(PLXC.lex.getLine(), e, s);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sentencia ::= IF AP exp CP sentencia 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SentIF(PLXC.lex.getLine(), e, s, null);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sentencia ::= IF AP exp CP sentencia ELSE sentencia 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion s1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion s2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                RESULT = new SentIF(PLXC.lex.getLine(), e, s1, s2);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sentencia ::= PRINT exp PYC 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                RESULT = new LlamadaMetodo(
                    PLXC.lex.getLine(),
                    e,
                    Metodo.MOSTRAR,
                    null
                );
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sentencia ::= ALL bloque_begin lista_sentencias CLL 
            {
              Instruccion RESULT =null;
		int bloqueAnteriorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bloqueAnteriorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer bloqueAnterior = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Bloque l = (Bloque)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                tabla.eliminarBloque(bloqueActual);
                bloqueActual = bloqueAnterior; // Vuelvo al bloque anterior

                RESULT = l;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sentencia ::= PYC 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencia",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // select_list ::= select_list select 
            {
              List<SentSelectFrom> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<SentSelectFrom> l = (List<SentSelectFrom>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentSelectFrom s = (SentSelectFrom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    l.add(s);
                    RESULT = l;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // select_list ::= select 
            {
              List<SentSelectFrom> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentSelectFrom s = (SentSelectFrom)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    List<SentSelectFrom> list = new ArrayList<>();
                    list.add(s);
                    RESULT = list;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // select ::= SELECT select_dir IDENT FROM exp TO exp step def 
            {
              SentSelectFrom RESULT =null;
		int firstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int firstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Boolean first = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fromleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fromright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Instruccion from = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int toleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int toright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion to = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion st = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion df = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                    Objeto obj = tabla.buscar(id);
                    Variable var = (Variable) obj;
                    RESULT = new SentSelectFrom(PLXC.lex.getLine(),var,first,from,to,st,df);
                    
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // step ::= STEP exp 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("step",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // step ::= 
            {
              Instruccion RESULT =null;
		 Literal l = new Literal(bloqueActual,TipoInt.instancia,1); 
                                RESULT = new ExpLiteral(PLXC.lex.getLine(),l);
                            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("step",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // select_dir ::= FIRST 
            {
              Boolean RESULT =null;
		 RESULT= true; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_dir",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // select_dir ::= LAST 
            {
              Boolean RESULT =null;
		 RESULT= false; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_dir",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // select_dir ::= 
            {
              Boolean RESULT =null;
		 RESULT= true;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("select_dir",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // def ::= DEFAULT exp 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // def ::= 
            {
              Instruccion RESULT =null;
		  Literal none = new Literal(bloqueActual, TipoInt.instancia,0);
                    RESULT = new ExpLiteral(PLXC.lex.getLine(), none); 
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("def",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // begin_for ::= lista_declaracion 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_for",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // begin_for ::= exp 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_for",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // begin_for ::= 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("begin_for",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // condicion_for ::= exp 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_for",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // condicion_for ::= 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("condicion_for",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // act_for ::= exp 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("act_for",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // act_for ::= 
            {
              Instruccion RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("act_for",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloque_begin ::= 
            {
              Integer RESULT =null;
		
    RESULT = bloqueActual; // Guardo el bloque en el que estaba
    idBloque++;
    bloqueActual = idBloque;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloque_begin",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // lista_declaracion ::= tipo IDENT 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Variable v = new Variable(i, bloqueActual, true, t);
                            tabla.declararVariable(PLXC.lex.getLine(), v);
                            RESULT = new ListaVar(PLXC.lex.getLine(), t);
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // lista_declaracion ::= tipo IDENT ASIG exp 
            {
              ListaVar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Variable v = new Variable(i, bloqueActual, true, t);
                            tabla.declararVariable(PLXC.lex.getLine(), v);

                            ListaVar l = new ListaVar(PLXC.lex.getLine(), t);
                            l.add(
                                new LlamadaMetodo(
                                    PLXC.lex.getLine(),
                                    new ExpVariable(PLXC.lex.getLine(), v),
                                    Metodo.CREAR_VARIABLE,
                                    new Instruccion[]{e}
                                )
                            );

                            RESULT = l;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_declaracion ::= lista_declaracion COMA IDENT 
            {
              ListaVar RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Variable v = new Variable(i, bloqueActual, true, l.getTipo());
                            tabla.declararVariable(PLXC.lex.getLine(), v);
                            RESULT = l;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_declaracion ::= lista_declaracion COMA IDENT ASIG exp 
            {
              ListaVar RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ListaVar l = (ListaVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                            Variable v = new Variable(i, bloqueActual, true, l.getTipo());
                            tabla.declararVariable(PLXC.lex.getLine(), v);

                            l.add(
                                new LlamadaMetodo(
                                    PLXC.lex.getLine(),
                                    new ExpVariable(PLXC.lex.getLine(), v),
                                    Metodo.CREAR_VARIABLE,
                                    new Instruccion[]{e}
                                )
                            );

                            RESULT = l;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lista_declaracion",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= literal 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal l = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new ExpLiteral(PLXC.lex.getLine(), l);            
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= IDENT 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Objeto obj = tabla.buscar(i);

            if(obj == null) {
                throw new ParseException("Variable <" + i + "> no fue declarada", PLXC.lex.getLine());
            }

            RESULT = new ExpVariable(PLXC.lex.getLine(), (Variable) obj);
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= select_list WHERE exp 
            {
              Instruccion RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<SentSelectFrom> l = (List<SentSelectFrom>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
                //System.out.println("hols");
                String fin = Objeto.newEtiqueta();
                for (int i=0;i<l.size();i++){

                    SentSelectFrom f = l.get(i);
                    if(i>0){
                        f.setPreStartTag(l.get(i-1).getStartTag());
                    }
                    if(i<l.size()-1){
                        SentSelectFrom next = l.get(i+1);
                        f.setBody(next);
                        f.setNextDefaultTag(next.getDefaultTag());
                    }else{
                        f.setBody(e);
                    }
                    f.setFinalTag(fin);
                }
                RESULT = l.get(0);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= IDENT ASIG exp 
            {
              Instruccion RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            Objeto obj = tabla.buscar(i);

            if(obj == null) {
                throw new ParseException("Variable <" + i + "> no fue declarada", PLXC.lex.getLine());
            }

            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                new ExpVariable(PLXC.lex.getLine(), (Variable) obj),
                Metodo.ASIGNAR,
                new Instruccion[]{e}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= exp DESPDER exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                Metodo.DESPDERECHA,
                new Instruccion[]{e2}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp DESPIZQ exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
           
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                Metodo.DESPIQUIERDA,
                new Instruccion[]{e2}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp op_aditivo exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                op,
                new Instruccion[]{e2}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= exp op_mult exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                op,
                new Instruccion[]{e2}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= exp op_relacional exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e1,
                op,
                new Instruccion[]{e2}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= exp IMPLICACION exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e1, Metodo.IMPLICACION, new Instruccion[]{e2});
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp NAND exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e1, Metodo.NAND, new Instruccion[]{e2});
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp AND exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new CortoCircuito(
                PLXC.lex.getLine(),
                e1,
                Metodo.AND,
                e2
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp XOR exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  
            RESULT = new LlamadaMetodo(PLXC.lex.getLine(), e1, Metodo.XOR, new Instruccion[]{e2});
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp OR exp 
            {
              Instruccion RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Instruccion e1 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e2 = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new CortoCircuito(
                PLXC.lex.getLine(),
                e1,
                Metodo.OR,
                e2
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= NOT exp 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e,
                Metodo.NOT,
                null
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= op_unario exp 
            {
              Instruccion RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e,
                op,
                null
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= exp op_unario_after 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            RESULT = new copiavariableYLlama(
                PLXC.lex.getLine(),
                e,
                op,
                null
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= AP exp CP 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
            RESULT = e;
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= AP tipo CP exp 
            {
              Instruccion RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Tipo t = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
            ExpTipo et = new ExpTipo(PLXC.lex.getLine(), t);
            RESULT = new LlamadaMetodo(
                PLXC.lex.getLine(),
                e,
                Metodo.CAST,
                new Instruccion[]{et}
            );
        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // op_aditivo ::= MAS 
            {
              String RESULT =null;
		 RESULT = Metodo.SUMA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aditivo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // op_aditivo ::= MENOS 
            {
              String RESULT =null;
		 RESULT = Metodo.RESTA; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_aditivo",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // op_mult ::= MULT 
            {
              String RESULT =null;
		 RESULT = Metodo.PRODUCTO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_mult",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // op_mult ::= DIV 
            {
              String RESULT =null;
		 RESULT = Metodo.DIVISION; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_mult",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // op_mult ::= MOD 
            {
              String RESULT =null;
		 RESULT = Metodo.MODULO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_mult",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // op_relacional ::= MENOR 
            {
              String RESULT =null;
		 RESULT = Metodo.MENOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // op_relacional ::= MENORIGUAL 
            {
              String RESULT =null;
		 RESULT = Metodo.MENOR_IGUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // op_relacional ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = Metodo.MAYOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // op_relacional ::= MAYORIGUAL 
            {
              String RESULT =null;
		 RESULT = Metodo.MAYOR_IGUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // op_relacional ::= IGUAL 
            {
              String RESULT =null;
		 RESULT = Metodo.IGUAL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // op_relacional ::= DIST 
            {
              String RESULT =null;
		 RESULT = Metodo.DISTINTO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_relacional",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // op_unario ::= MENOS 
            {
              String RESULT =null;
		 RESULT = Metodo.OPUESTO; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // op_unario ::= MASMAS 
            {
              String RESULT =null;
		 RESULT = Metodo.SIGUIENTE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // op_unario ::= MENOSMENOS 
            {
              String RESULT =null;
		 RESULT = Metodo.ANTERIOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // op_unario_after ::= MASMAS 
            {
              String RESULT =null;
		 RESULT = Metodo.SIGUIENTE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario_after",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // op_unario_after ::= MENOSMENOS 
            {
              String RESULT =null;
		 RESULT = Metodo.ANTERIOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("op_unario_after",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // tipo ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = TipoInt.instancia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // tipo ::= CHAR 
            {
              Tipo RESULT =null;
		 RESULT = TipoChar.instancia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // tipo ::= FLOAT 
            {
              Tipo RESULT =null;
		 RESULT = TipoReal.instancia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // tipo ::= BOOLEAN 
            {
              Tipo RESULT =null;
		 RESULT = TipoBool.instancia; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // literal ::= ENTERO 
            {
              Literal RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(bloqueActual, TipoInt.instancia, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // literal ::= CARACTER 
            {
              Literal RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(bloqueActual, TipoChar.instancia, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // literal ::= REAL 
            {
              Literal RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Float r = (Float)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(bloqueActual, TipoReal.instancia, r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // literal ::= BOOLTRUE 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(bloqueActual, TipoBool.instancia, Integer.valueOf("1")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // literal ::= BOOLFALSE 
            {
              Literal RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Literal(bloqueActual, TipoBool.instancia, Integer.valueOf("0")); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("literal",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
